//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MRNNexus_DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MRNNexusTestEntities : DbContext
    {
        public MRNNexusTestEntities()
            : base("name=MRNNexusTestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalSupply> AdditionalSupplies { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Adjuster> Adjusters { get; set; }
        public virtual DbSet<Adjustment> Adjustments { get; set; }
        public virtual DbSet<CalendarData> CalendarDatas { get; set; }
        public virtual DbSet<CallLog> CallLogs { get; set; }
        public virtual DbSet<ClaimContact> ClaimContacts { get; set; }
        public virtual DbSet<ClaimDocument> ClaimDocuments { get; set; }
        public virtual DbSet<Claim> Claims { get; set; }
        public virtual DbSet<ClaimStatus> ClaimStatuses { get; set; }
        public virtual DbSet<ClaimVendor> ClaimVendors { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Damage> Damages { get; set; }
        public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Inspection> Inspections { get; set; }
        public virtual DbSet<InsuranceCompany> InsuranceCompanies { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<KnockerRespons> KnockerResponses { get; set; }
        public virtual DbSet<Lead> Leads { get; set; }
        public virtual DbSet<LU_AdjustmentResults> LU_AdjustmentResults { get; set; }
        public virtual DbSet<LU_AppointmentTypes> LU_AppointmentTypes { get; set; }
        public virtual DbSet<LU_ClaimDocumentTypes> LU_ClaimDocumentTypes { get; set; }
        public virtual DbSet<LU_ClaimStatusTypes> LU_ClaimStatusTypes { get; set; }
        public virtual DbSet<LU_DamageTypes> LU_DamageTypes { get; set; }
        public virtual DbSet<LU_EmployeeTypes> LU_EmployeeTypes { get; set; }
        public virtual DbSet<LU_InvoiceTypes> LU_InvoiceTypes { get; set; }
        public virtual DbSet<LU_KnockResponseTypes> LU_KnockResponseTypes { get; set; }
        public virtual DbSet<LU_LeadTypes> LU_LeadTypes { get; set; }
        public virtual DbSet<LU_PayFrequencies> LU_PayFrequencies { get; set; }
        public virtual DbSet<LU_PaymentDescriptions> LU_PaymentDescriptions { get; set; }
        public virtual DbSet<LU_PaymentTypes> LU_PaymentTypes { get; set; }
        public virtual DbSet<LU_PayTypes> LU_PayTypes { get; set; }
        public virtual DbSet<LU_Permissions> LU_Permissions { get; set; }
        public virtual DbSet<LU_PlaneTypes> LU_PlaneTypes { get; set; }
        public virtual DbSet<LU_Products> LU_Products { get; set; }
        public virtual DbSet<LU_ProductTypes> LU_ProductTypes { get; set; }
        public virtual DbSet<LU_RidgeMaterialTypes> LU_RidgeMaterialTypes { get; set; }
        public virtual DbSet<LU_ScopeTypes> LU_ScopeTypes { get; set; }
        public virtual DbSet<LU_ServiceTypes> LU_ServiceTypes { get; set; }
        public virtual DbSet<LU_ShingleTypes> LU_ShingleTypes { get; set; }
        public virtual DbSet<LU_UnitOfMeasures> LU_UnitOfMeasures { get; set; }
        public virtual DbSet<LU_VendorTypes> LU_VendorTypes { get; set; }
        public virtual DbSet<NewRoof> NewRoofs { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Plane> Planes { get; set; }
        public virtual DbSet<Referrer> Referrers { get; set; }
        public virtual DbSet<Scope> Scopes { get; set; }
        public virtual DbSet<SurplusSupply> SurplusSupplies { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
    
        public virtual int proc_AddAdditionalSupplies(Nullable<int> claimID, Nullable<System.DateTime> pickUpDate, Nullable<System.DateTime> dropOffDate, string items, Nullable<double> cost, string receiptImagePath, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var pickUpDateParameter = pickUpDate.HasValue ?
                new ObjectParameter("PickUpDate", pickUpDate) :
                new ObjectParameter("PickUpDate", typeof(System.DateTime));
    
            var dropOffDateParameter = dropOffDate.HasValue ?
                new ObjectParameter("DropOffDate", dropOffDate) :
                new ObjectParameter("DropOffDate", typeof(System.DateTime));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(double));
    
            var receiptImagePathParameter = receiptImagePath != null ?
                new ObjectParameter("ReceiptImagePath", receiptImagePath) :
                new ObjectParameter("ReceiptImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddAdditionalSupplies", claimIDParameter, pickUpDateParameter, dropOffDateParameter, itemsParameter, costParameter, receiptImagePathParameter, new_identity);
        }
    
        public virtual int proc_AddAddress(Nullable<int> customerID, string address, string zip, ObjectParameter new_identity)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddAddress", customerIDParameter, addressParameter, zipParameter, new_identity);
        }
    
        public virtual int proc_AddAdjuster(string firstName, string lastName, string suffix, string phoneNumber, string phoneExt, string email, Nullable<int> insuranceCompanyID, string comments, ObjectParameter new_identity)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneExtParameter = phoneExt != null ?
                new ObjectParameter("PhoneExt", phoneExt) :
                new ObjectParameter("PhoneExt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var insuranceCompanyIDParameter = insuranceCompanyID.HasValue ?
                new ObjectParameter("InsuranceCompanyID", insuranceCompanyID) :
                new ObjectParameter("InsuranceCompanyID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddAdjuster", firstNameParameter, lastNameParameter, suffixParameter, phoneNumberParameter, phoneExtParameter, emailParameter, insuranceCompanyIDParameter, commentsParameter, new_identity);
        }
    
        public virtual int proc_AddAdjustment(Nullable<int> adjusterID, Nullable<int> claimID, Nullable<bool> gutters, Nullable<bool> exterior, Nullable<bool> interior, Nullable<int> adjustmentResultID, Nullable<System.DateTime> adjustmentDate, string adjustmentComment, ObjectParameter new_identity)
        {
            var adjusterIDParameter = adjusterID.HasValue ?
                new ObjectParameter("AdjusterID", adjusterID) :
                new ObjectParameter("AdjusterID", typeof(int));
    
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var guttersParameter = gutters.HasValue ?
                new ObjectParameter("Gutters", gutters) :
                new ObjectParameter("Gutters", typeof(bool));
    
            var exteriorParameter = exterior.HasValue ?
                new ObjectParameter("Exterior", exterior) :
                new ObjectParameter("Exterior", typeof(bool));
    
            var interiorParameter = interior.HasValue ?
                new ObjectParameter("Interior", interior) :
                new ObjectParameter("Interior", typeof(bool));
    
            var adjustmentResultIDParameter = adjustmentResultID.HasValue ?
                new ObjectParameter("AdjustmentResultID", adjustmentResultID) :
                new ObjectParameter("AdjustmentResultID", typeof(int));
    
            var adjustmentDateParameter = adjustmentDate.HasValue ?
                new ObjectParameter("AdjustmentDate", adjustmentDate) :
                new ObjectParameter("AdjustmentDate", typeof(System.DateTime));
    
            var adjustmentCommentParameter = adjustmentComment != null ?
                new ObjectParameter("AdjustmentComment", adjustmentComment) :
                new ObjectParameter("AdjustmentComment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddAdjustment", adjusterIDParameter, claimIDParameter, guttersParameter, exteriorParameter, interiorParameter, adjustmentResultIDParameter, adjustmentDateParameter, adjustmentCommentParameter, new_identity);
        }
    
        public virtual int proc_AddCalendarData(Nullable<int> appointmentTypeID, Nullable<int> employeeID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> claimID, Nullable<int> leadID, string note, ObjectParameter new_identity)
        {
            var appointmentTypeIDParameter = appointmentTypeID.HasValue ?
                new ObjectParameter("AppointmentTypeID", appointmentTypeID) :
                new ObjectParameter("AppointmentTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddCalendarData", appointmentTypeIDParameter, employeeIDParameter, startTimeParameter, endTimeParameter, claimIDParameter, leadIDParameter, noteParameter, new_identity);
        }
    
        public virtual int proc_AddCallLog(Nullable<int> claimID, Nullable<int> employeeID, string whoWasCalled, string reasonForCall, string whoAnswered, string callResults, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var whoWasCalledParameter = whoWasCalled != null ?
                new ObjectParameter("WhoWasCalled", whoWasCalled) :
                new ObjectParameter("WhoWasCalled", typeof(string));
    
            var reasonForCallParameter = reasonForCall != null ?
                new ObjectParameter("ReasonForCall", reasonForCall) :
                new ObjectParameter("ReasonForCall", typeof(string));
    
            var whoAnsweredParameter = whoAnswered != null ?
                new ObjectParameter("WhoAnswered", whoAnswered) :
                new ObjectParameter("WhoAnswered", typeof(string));
    
            var callResultsParameter = callResults != null ?
                new ObjectParameter("CallResults", callResults) :
                new ObjectParameter("CallResults", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddCallLog", claimIDParameter, employeeIDParameter, whoWasCalledParameter, reasonForCallParameter, whoAnsweredParameter, callResultsParameter, new_identity);
        }
    
        public virtual int proc_AddClaim(Nullable<int> customerID, Nullable<int> leadID, Nullable<int> billingID, Nullable<int> propertyID, Nullable<int> insuranceCompanyID, string insuranceClaimNumber, Nullable<System.DateTime> lossDate, string mortgageCompany, string mortgageAccount, ObjectParameter new_identity)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var insuranceCompanyIDParameter = insuranceCompanyID.HasValue ?
                new ObjectParameter("InsuranceCompanyID", insuranceCompanyID) :
                new ObjectParameter("InsuranceCompanyID", typeof(int));
    
            var insuranceClaimNumberParameter = insuranceClaimNumber != null ?
                new ObjectParameter("InsuranceClaimNumber", insuranceClaimNumber) :
                new ObjectParameter("InsuranceClaimNumber", typeof(string));
    
            var lossDateParameter = lossDate.HasValue ?
                new ObjectParameter("LossDate", lossDate) :
                new ObjectParameter("LossDate", typeof(System.DateTime));
    
            var mortgageCompanyParameter = mortgageCompany != null ?
                new ObjectParameter("MortgageCompany", mortgageCompany) :
                new ObjectParameter("MortgageCompany", typeof(string));
    
            var mortgageAccountParameter = mortgageAccount != null ?
                new ObjectParameter("MortgageAccount", mortgageAccount) :
                new ObjectParameter("MortgageAccount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddClaim", customerIDParameter, leadIDParameter, billingIDParameter, propertyIDParameter, insuranceCompanyIDParameter, insuranceClaimNumberParameter, lossDateParameter, mortgageCompanyParameter, mortgageAccountParameter, new_identity);
        }
    
        public virtual int proc_AddClaimContact(Nullable<int> claimID, Nullable<int> customerID, Nullable<int> knockerID, Nullable<int> salesPersonID, Nullable<int> supervisorID, Nullable<int> salesManagerID, Nullable<int> adjusterID, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var knockerIDParameter = knockerID.HasValue ?
                new ObjectParameter("KnockerID", knockerID) :
                new ObjectParameter("KnockerID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var supervisorIDParameter = supervisorID.HasValue ?
                new ObjectParameter("SupervisorID", supervisorID) :
                new ObjectParameter("SupervisorID", typeof(int));
    
            var salesManagerIDParameter = salesManagerID.HasValue ?
                new ObjectParameter("SalesManagerID", salesManagerID) :
                new ObjectParameter("SalesManagerID", typeof(int));
    
            var adjusterIDParameter = adjusterID.HasValue ?
                new ObjectParameter("AdjusterID", adjusterID) :
                new ObjectParameter("AdjusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddClaimContact", claimIDParameter, customerIDParameter, knockerIDParameter, salesPersonIDParameter, supervisorIDParameter, salesManagerIDParameter, adjusterIDParameter, new_identity);
        }
    
        public virtual int proc_AddClaimDocuments(Nullable<int> claimID, string filePath, string fileName, string fileExt, Nullable<int> docTypeID, Nullable<System.DateTime> documentDate, string signatureImagePath, Nullable<int> numSignatures, string initialImagePath, Nullable<int> numInitials, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileExtParameter = fileExt != null ?
                new ObjectParameter("FileExt", fileExt) :
                new ObjectParameter("FileExt", typeof(string));
    
            var docTypeIDParameter = docTypeID.HasValue ?
                new ObjectParameter("DocTypeID", docTypeID) :
                new ObjectParameter("DocTypeID", typeof(int));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var signatureImagePathParameter = signatureImagePath != null ?
                new ObjectParameter("SignatureImagePath", signatureImagePath) :
                new ObjectParameter("SignatureImagePath", typeof(string));
    
            var numSignaturesParameter = numSignatures.HasValue ?
                new ObjectParameter("NumSignatures", numSignatures) :
                new ObjectParameter("NumSignatures", typeof(int));
    
            var initialImagePathParameter = initialImagePath != null ?
                new ObjectParameter("InitialImagePath", initialImagePath) :
                new ObjectParameter("InitialImagePath", typeof(string));
    
            var numInitialsParameter = numInitials.HasValue ?
                new ObjectParameter("NumInitials", numInitials) :
                new ObjectParameter("NumInitials", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddClaimDocuments", claimIDParameter, filePathParameter, fileNameParameter, fileExtParameter, docTypeIDParameter, documentDateParameter, signatureImagePathParameter, numSignaturesParameter, initialImagePathParameter, numInitialsParameter, new_identity);
        }
    
        public virtual int proc_AddClaimStatus(Nullable<int> claimID, Nullable<int> claimStatusTypeID, Nullable<System.DateTime> claimStatusDate, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var claimStatusTypeIDParameter = claimStatusTypeID.HasValue ?
                new ObjectParameter("ClaimStatusTypeID", claimStatusTypeID) :
                new ObjectParameter("ClaimStatusTypeID", typeof(int));
    
            var claimStatusDateParameter = claimStatusDate.HasValue ?
                new ObjectParameter("ClaimStatusDate", claimStatusDate) :
                new ObjectParameter("ClaimStatusDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddClaimStatus", claimIDParameter, claimStatusTypeIDParameter, claimStatusDateParameter, new_identity);
        }
    
        public virtual int proc_AddClaimVendor(Nullable<int> claimID, Nullable<int> vendorID, Nullable<int> serviceTypeID, ObjectParameter output_ClaimID, ObjectParameter output_VendorID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddClaimVendor", claimIDParameter, vendorIDParameter, serviceTypeIDParameter, output_ClaimID, output_VendorID);
        }
    
        public virtual int proc_AddCustomer(string firstName, string middleName, string lastName, string suffix, string primaryNumber, string secondaryNumber, string email, Nullable<bool> mailPromos, ObjectParameter new_identity)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var primaryNumberParameter = primaryNumber != null ?
                new ObjectParameter("PrimaryNumber", primaryNumber) :
                new ObjectParameter("PrimaryNumber", typeof(string));
    
            var secondaryNumberParameter = secondaryNumber != null ?
                new ObjectParameter("SecondaryNumber", secondaryNumber) :
                new ObjectParameter("SecondaryNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mailPromosParameter = mailPromos.HasValue ?
                new ObjectParameter("MailPromos", mailPromos) :
                new ObjectParameter("MailPromos", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddCustomer", firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, primaryNumberParameter, secondaryNumberParameter, emailParameter, mailPromosParameter, new_identity);
        }
    
        public virtual int proc_AddDamage(Nullable<int> planeID, Nullable<int> damageTypeID, Nullable<int> documentID, Nullable<int> damageMeasurement, Nullable<int> xCoordinate, Nullable<int> yCoordinate, ObjectParameter new_identity)
        {
            var planeIDParameter = planeID.HasValue ?
                new ObjectParameter("PlaneID", planeID) :
                new ObjectParameter("PlaneID", typeof(int));
    
            var damageTypeIDParameter = damageTypeID.HasValue ?
                new ObjectParameter("DamageTypeID", damageTypeID) :
                new ObjectParameter("DamageTypeID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var damageMeasurementParameter = damageMeasurement.HasValue ?
                new ObjectParameter("DamageMeasurement", damageMeasurement) :
                new ObjectParameter("DamageMeasurement", typeof(int));
    
            var xCoordinateParameter = xCoordinate.HasValue ?
                new ObjectParameter("xCoordinate", xCoordinate) :
                new ObjectParameter("xCoordinate", typeof(int));
    
            var yCoordinateParameter = yCoordinate.HasValue ?
                new ObjectParameter("yCoordinate", yCoordinate) :
                new ObjectParameter("yCoordinate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddDamage", planeIDParameter, damageTypeIDParameter, documentIDParameter, damageMeasurementParameter, xCoordinateParameter, yCoordinateParameter, new_identity);
        }
    
        public virtual int proc_AddEmployee(Nullable<int> employeeTypeID, string firstName, string lastName, string suffix, string email, string cellPhone, ObjectParameter new_identity)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddEmployee", employeeTypeIDParameter, firstNameParameter, lastNameParameter, suffixParameter, emailParameter, cellPhoneParameter, new_identity);
        }
    
        public virtual int proc_AddEmployeeDetails(Nullable<int> employeeID, string mailingAddress, string zip, Nullable<System.DateTime> dateHired, Nullable<System.DateTime> dateReleased, string shirtSize, Nullable<double> payRate, Nullable<int> payTypeID, Nullable<int> payFrequencyID, Nullable<bool> previousEmployee, string dLPhotoPath, string companyPhotoPath, string signaturePath, ObjectParameter new_identity)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var mailingAddressParameter = mailingAddress != null ?
                new ObjectParameter("MailingAddress", mailingAddress) :
                new ObjectParameter("MailingAddress", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var dateHiredParameter = dateHired.HasValue ?
                new ObjectParameter("DateHired", dateHired) :
                new ObjectParameter("DateHired", typeof(System.DateTime));
    
            var dateReleasedParameter = dateReleased.HasValue ?
                new ObjectParameter("DateReleased", dateReleased) :
                new ObjectParameter("DateReleased", typeof(System.DateTime));
    
            var shirtSizeParameter = shirtSize != null ?
                new ObjectParameter("ShirtSize", shirtSize) :
                new ObjectParameter("ShirtSize", typeof(string));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("PayRate", payRate) :
                new ObjectParameter("PayRate", typeof(double));
    
            var payTypeIDParameter = payTypeID.HasValue ?
                new ObjectParameter("PayTypeID", payTypeID) :
                new ObjectParameter("PayTypeID", typeof(int));
    
            var payFrequencyIDParameter = payFrequencyID.HasValue ?
                new ObjectParameter("PayFrequencyID", payFrequencyID) :
                new ObjectParameter("PayFrequencyID", typeof(int));
    
            var previousEmployeeParameter = previousEmployee.HasValue ?
                new ObjectParameter("PreviousEmployee", previousEmployee) :
                new ObjectParameter("PreviousEmployee", typeof(bool));
    
            var dLPhotoPathParameter = dLPhotoPath != null ?
                new ObjectParameter("DLPhotoPath", dLPhotoPath) :
                new ObjectParameter("DLPhotoPath", typeof(string));
    
            var companyPhotoPathParameter = companyPhotoPath != null ?
                new ObjectParameter("CompanyPhotoPath", companyPhotoPath) :
                new ObjectParameter("CompanyPhotoPath", typeof(string));
    
            var signaturePathParameter = signaturePath != null ?
                new ObjectParameter("SignaturePath", signaturePath) :
                new ObjectParameter("SignaturePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddEmployeeDetails", employeeIDParameter, mailingAddressParameter, zipParameter, dateHiredParameter, dateReleasedParameter, shirtSizeParameter, payRateParameter, payTypeIDParameter, payFrequencyIDParameter, previousEmployeeParameter, dLPhotoPathParameter, companyPhotoPathParameter, signaturePathParameter, new_identity);
        }
    
        public virtual int proc_AddInspection(Nullable<int> claimID, Nullable<int> ridgeMaterialTypeID, Nullable<int> shingleTypeID, Nullable<System.DateTime> inspectionDate, Nullable<bool> skyLights, Nullable<bool> leaks, Nullable<bool> gutterDamage, Nullable<bool> drivewayDamage, Nullable<bool> magneticRollers, Nullable<bool> iceWaterShield, Nullable<bool> emergencyRepair, Nullable<double> emergencyRepairAmount, Nullable<bool> qualityControl, Nullable<bool> protectLandscaping, Nullable<bool> removeTrash, Nullable<bool> furnishPermit, Nullable<bool> coverPool, Nullable<bool> interiorDamage, Nullable<bool> exteriorDamage, Nullable<bool> lightningProtection, Nullable<bool> tearOff, Nullable<bool> satellite, Nullable<bool> solarPanels, Nullable<int> roofAge, string comments, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var ridgeMaterialTypeIDParameter = ridgeMaterialTypeID.HasValue ?
                new ObjectParameter("RidgeMaterialTypeID", ridgeMaterialTypeID) :
                new ObjectParameter("RidgeMaterialTypeID", typeof(int));
    
            var shingleTypeIDParameter = shingleTypeID.HasValue ?
                new ObjectParameter("ShingleTypeID", shingleTypeID) :
                new ObjectParameter("ShingleTypeID", typeof(int));
    
            var inspectionDateParameter = inspectionDate.HasValue ?
                new ObjectParameter("InspectionDate", inspectionDate) :
                new ObjectParameter("InspectionDate", typeof(System.DateTime));
    
            var skyLightsParameter = skyLights.HasValue ?
                new ObjectParameter("SkyLights", skyLights) :
                new ObjectParameter("SkyLights", typeof(bool));
    
            var leaksParameter = leaks.HasValue ?
                new ObjectParameter("Leaks", leaks) :
                new ObjectParameter("Leaks", typeof(bool));
    
            var gutterDamageParameter = gutterDamage.HasValue ?
                new ObjectParameter("GutterDamage", gutterDamage) :
                new ObjectParameter("GutterDamage", typeof(bool));
    
            var drivewayDamageParameter = drivewayDamage.HasValue ?
                new ObjectParameter("DrivewayDamage", drivewayDamage) :
                new ObjectParameter("DrivewayDamage", typeof(bool));
    
            var magneticRollersParameter = magneticRollers.HasValue ?
                new ObjectParameter("MagneticRollers", magneticRollers) :
                new ObjectParameter("MagneticRollers", typeof(bool));
    
            var iceWaterShieldParameter = iceWaterShield.HasValue ?
                new ObjectParameter("IceWaterShield", iceWaterShield) :
                new ObjectParameter("IceWaterShield", typeof(bool));
    
            var emergencyRepairParameter = emergencyRepair.HasValue ?
                new ObjectParameter("EmergencyRepair", emergencyRepair) :
                new ObjectParameter("EmergencyRepair", typeof(bool));
    
            var emergencyRepairAmountParameter = emergencyRepairAmount.HasValue ?
                new ObjectParameter("EmergencyRepairAmount", emergencyRepairAmount) :
                new ObjectParameter("EmergencyRepairAmount", typeof(double));
    
            var qualityControlParameter = qualityControl.HasValue ?
                new ObjectParameter("QualityControl", qualityControl) :
                new ObjectParameter("QualityControl", typeof(bool));
    
            var protectLandscapingParameter = protectLandscaping.HasValue ?
                new ObjectParameter("ProtectLandscaping", protectLandscaping) :
                new ObjectParameter("ProtectLandscaping", typeof(bool));
    
            var removeTrashParameter = removeTrash.HasValue ?
                new ObjectParameter("RemoveTrash", removeTrash) :
                new ObjectParameter("RemoveTrash", typeof(bool));
    
            var furnishPermitParameter = furnishPermit.HasValue ?
                new ObjectParameter("FurnishPermit", furnishPermit) :
                new ObjectParameter("FurnishPermit", typeof(bool));
    
            var coverPoolParameter = coverPool.HasValue ?
                new ObjectParameter("CoverPool", coverPool) :
                new ObjectParameter("CoverPool", typeof(bool));
    
            var interiorDamageParameter = interiorDamage.HasValue ?
                new ObjectParameter("InteriorDamage", interiorDamage) :
                new ObjectParameter("InteriorDamage", typeof(bool));
    
            var exteriorDamageParameter = exteriorDamage.HasValue ?
                new ObjectParameter("ExteriorDamage", exteriorDamage) :
                new ObjectParameter("ExteriorDamage", typeof(bool));
    
            var lightningProtectionParameter = lightningProtection.HasValue ?
                new ObjectParameter("LightningProtection", lightningProtection) :
                new ObjectParameter("LightningProtection", typeof(bool));
    
            var tearOffParameter = tearOff.HasValue ?
                new ObjectParameter("TearOff", tearOff) :
                new ObjectParameter("TearOff", typeof(bool));
    
            var satelliteParameter = satellite.HasValue ?
                new ObjectParameter("Satellite", satellite) :
                new ObjectParameter("Satellite", typeof(bool));
    
            var solarPanelsParameter = solarPanels.HasValue ?
                new ObjectParameter("SolarPanels", solarPanels) :
                new ObjectParameter("SolarPanels", typeof(bool));
    
            var roofAgeParameter = roofAge.HasValue ?
                new ObjectParameter("RoofAge", roofAge) :
                new ObjectParameter("RoofAge", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddInspection", claimIDParameter, ridgeMaterialTypeIDParameter, shingleTypeIDParameter, inspectionDateParameter, skyLightsParameter, leaksParameter, gutterDamageParameter, drivewayDamageParameter, magneticRollersParameter, iceWaterShieldParameter, emergencyRepairParameter, emergencyRepairAmountParameter, qualityControlParameter, protectLandscapingParameter, removeTrashParameter, furnishPermitParameter, coverPoolParameter, interiorDamageParameter, exteriorDamageParameter, lightningProtectionParameter, tearOffParameter, satelliteParameter, solarPanelsParameter, roofAgeParameter, commentsParameter, new_identity);
        }
    
        public virtual int proc_AddInsuranceCompany(string companyName, string address, string zip, string claimPhoneNumber, string claimPhoneExt, string faxNumber, string faxExt, string email, Nullable<bool> independent, ObjectParameter new_identity)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var claimPhoneNumberParameter = claimPhoneNumber != null ?
                new ObjectParameter("ClaimPhoneNumber", claimPhoneNumber) :
                new ObjectParameter("ClaimPhoneNumber", typeof(string));
    
            var claimPhoneExtParameter = claimPhoneExt != null ?
                new ObjectParameter("ClaimPhoneExt", claimPhoneExt) :
                new ObjectParameter("ClaimPhoneExt", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var faxExtParameter = faxExt != null ?
                new ObjectParameter("FaxExt", faxExt) :
                new ObjectParameter("FaxExt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var independentParameter = independent.HasValue ?
                new ObjectParameter("Independent", independent) :
                new ObjectParameter("Independent", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddInsuranceCompany", companyNameParameter, addressParameter, zipParameter, claimPhoneNumberParameter, claimPhoneExtParameter, faxNumberParameter, faxExtParameter, emailParameter, independentParameter, new_identity);
        }
    
        public virtual int proc_AddInvoice(Nullable<int> claimID, Nullable<int> invoiceTypeID, Nullable<double> invoiceAmount, Nullable<System.DateTime> invoiceDate, Nullable<bool> paid, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(double));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddInvoice", claimIDParameter, invoiceTypeIDParameter, invoiceAmountParameter, invoiceDateParameter, paidParameter, new_identity);
        }
    
        public virtual int proc_AddKnockerResponse(Nullable<int> knockerID, Nullable<int> knockResponseTypeID, string address, string zip, Nullable<double> lat, Nullable<double> @long, ObjectParameter new_identity)
        {
            var knockerIDParameter = knockerID.HasValue ?
                new ObjectParameter("KnockerID", knockerID) :
                new ObjectParameter("KnockerID", typeof(int));
    
            var knockResponseTypeIDParameter = knockResponseTypeID.HasValue ?
                new ObjectParameter("KnockResponseTypeID", knockResponseTypeID) :
                new ObjectParameter("KnockResponseTypeID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var longParameter = @long.HasValue ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddKnockerResponse", knockerIDParameter, knockResponseTypeIDParameter, addressParameter, zipParameter, latParameter, longParameter, new_identity);
        }
    
        public virtual int proc_AddLead(Nullable<int> leadTypeID, Nullable<int> knockerResponseID, Nullable<int> salesPersonID, Nullable<int> customerID, Nullable<int> addressID, Nullable<System.DateTime> leadDate, Nullable<int> creditToID, string temperature, ObjectParameter new_identity)
        {
            var leadTypeIDParameter = leadTypeID.HasValue ?
                new ObjectParameter("LeadTypeID", leadTypeID) :
                new ObjectParameter("LeadTypeID", typeof(int));
    
            var knockerResponseIDParameter = knockerResponseID.HasValue ?
                new ObjectParameter("KnockerResponseID", knockerResponseID) :
                new ObjectParameter("KnockerResponseID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var leadDateParameter = leadDate.HasValue ?
                new ObjectParameter("LeadDate", leadDate) :
                new ObjectParameter("LeadDate", typeof(System.DateTime));
    
            var creditToIDParameter = creditToID.HasValue ?
                new ObjectParameter("CreditToID", creditToID) :
                new ObjectParameter("CreditToID", typeof(int));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddLead", leadTypeIDParameter, knockerResponseIDParameter, salesPersonIDParameter, customerIDParameter, addressIDParameter, leadDateParameter, creditToIDParameter, temperatureParameter, new_identity);
        }
    
        public virtual int proc_AddNewRoof(Nullable<int> claimID, Nullable<int> productID, Nullable<double> upgradeCost, string comments, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var upgradeCostParameter = upgradeCost.HasValue ?
                new ObjectParameter("UpgradeCost", upgradeCost) :
                new ObjectParameter("UpgradeCost", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddNewRoof", claimIDParameter, productIDParameter, upgradeCostParameter, commentsParameter, new_identity);
        }
    
        public virtual int proc_AddOrder(Nullable<int> vendorID, Nullable<int> claimID, Nullable<System.DateTime> dateOrdered, Nullable<System.DateTime> dateDropped, Nullable<System.DateTime> scheduledInstallation, ObjectParameter new_identity)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var dateOrderedParameter = dateOrdered.HasValue ?
                new ObjectParameter("DateOrdered", dateOrdered) :
                new ObjectParameter("DateOrdered", typeof(System.DateTime));
    
            var dateDroppedParameter = dateDropped.HasValue ?
                new ObjectParameter("DateDropped", dateDropped) :
                new ObjectParameter("DateDropped", typeof(System.DateTime));
    
            var scheduledInstallationParameter = scheduledInstallation.HasValue ?
                new ObjectParameter("ScheduledInstallation", scheduledInstallation) :
                new ObjectParameter("ScheduledInstallation", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddOrder", vendorIDParameter, claimIDParameter, dateOrderedParameter, dateDroppedParameter, scheduledInstallationParameter, new_identity);
        }
    
        public virtual int proc_AddOrderItem(Nullable<int> orderID, Nullable<int> productID, Nullable<int> unitOfMeasureID, Nullable<int> quantity, ObjectParameter new_identity)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitOfMeasureIDParameter = unitOfMeasureID.HasValue ?
                new ObjectParameter("UnitOfMeasureID", unitOfMeasureID) :
                new ObjectParameter("UnitOfMeasureID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddOrderItem", orderIDParameter, productIDParameter, unitOfMeasureIDParameter, quantityParameter, new_identity);
        }
    
        public virtual int proc_AddPayment(Nullable<int> claimID, Nullable<int> paymentTypeID, Nullable<int> paymentDescriptionID, Nullable<double> amount, Nullable<System.DateTime> paymentDate, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentDescriptionIDParameter = paymentDescriptionID.HasValue ?
                new ObjectParameter("PaymentDescriptionID", paymentDescriptionID) :
                new ObjectParameter("PaymentDescriptionID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddPayment", claimIDParameter, paymentTypeIDParameter, paymentDescriptionIDParameter, amountParameter, paymentDateParameter, new_identity);
        }
    
        public virtual int proc_AddPlane(Nullable<int> planeTypeID, Nullable<int> inspectionID, Nullable<int> groupNumber, Nullable<int> numOfLayers, Nullable<int> threeAndOne, Nullable<int> fourAndUp, Nullable<int> pitch, Nullable<int> hipValley, Nullable<int> ridgeLength, Nullable<int> rakeLength, Nullable<int> eaveHeight, Nullable<int> eaveLength, Nullable<int> numberDecking, Nullable<int> stepFlashing, Nullable<double> squareFootage, string itemSpec, ObjectParameter new_identity)
        {
            var planeTypeIDParameter = planeTypeID.HasValue ?
                new ObjectParameter("PlaneTypeID", planeTypeID) :
                new ObjectParameter("PlaneTypeID", typeof(int));
    
            var inspectionIDParameter = inspectionID.HasValue ?
                new ObjectParameter("InspectionID", inspectionID) :
                new ObjectParameter("InspectionID", typeof(int));
    
            var groupNumberParameter = groupNumber.HasValue ?
                new ObjectParameter("GroupNumber", groupNumber) :
                new ObjectParameter("GroupNumber", typeof(int));
    
            var numOfLayersParameter = numOfLayers.HasValue ?
                new ObjectParameter("NumOfLayers", numOfLayers) :
                new ObjectParameter("NumOfLayers", typeof(int));
    
            var threeAndOneParameter = threeAndOne.HasValue ?
                new ObjectParameter("ThreeAndOne", threeAndOne) :
                new ObjectParameter("ThreeAndOne", typeof(int));
    
            var fourAndUpParameter = fourAndUp.HasValue ?
                new ObjectParameter("FourAndUp", fourAndUp) :
                new ObjectParameter("FourAndUp", typeof(int));
    
            var pitchParameter = pitch.HasValue ?
                new ObjectParameter("Pitch", pitch) :
                new ObjectParameter("Pitch", typeof(int));
    
            var hipValleyParameter = hipValley.HasValue ?
                new ObjectParameter("HipValley", hipValley) :
                new ObjectParameter("HipValley", typeof(int));
    
            var ridgeLengthParameter = ridgeLength.HasValue ?
                new ObjectParameter("RidgeLength", ridgeLength) :
                new ObjectParameter("RidgeLength", typeof(int));
    
            var rakeLengthParameter = rakeLength.HasValue ?
                new ObjectParameter("RakeLength", rakeLength) :
                new ObjectParameter("RakeLength", typeof(int));
    
            var eaveHeightParameter = eaveHeight.HasValue ?
                new ObjectParameter("EaveHeight", eaveHeight) :
                new ObjectParameter("EaveHeight", typeof(int));
    
            var eaveLengthParameter = eaveLength.HasValue ?
                new ObjectParameter("EaveLength", eaveLength) :
                new ObjectParameter("EaveLength", typeof(int));
    
            var numberDeckingParameter = numberDecking.HasValue ?
                new ObjectParameter("NumberDecking", numberDecking) :
                new ObjectParameter("NumberDecking", typeof(int));
    
            var stepFlashingParameter = stepFlashing.HasValue ?
                new ObjectParameter("StepFlashing", stepFlashing) :
                new ObjectParameter("StepFlashing", typeof(int));
    
            var squareFootageParameter = squareFootage.HasValue ?
                new ObjectParameter("SquareFootage", squareFootage) :
                new ObjectParameter("SquareFootage", typeof(double));
    
            var itemSpecParameter = itemSpec != null ?
                new ObjectParameter("ItemSpec", itemSpec) :
                new ObjectParameter("ItemSpec", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddPlane", planeTypeIDParameter, inspectionIDParameter, groupNumberParameter, numOfLayersParameter, threeAndOneParameter, fourAndUpParameter, pitchParameter, hipValleyParameter, ridgeLengthParameter, rakeLengthParameter, eaveHeightParameter, eaveLengthParameter, numberDeckingParameter, stepFlashingParameter, squareFootageParameter, itemSpecParameter, new_identity);
        }
    
        public virtual int proc_AddReferrer(string firstName, string lastName, string suffix, string mailingAddress, string zip, string email, string cellPhone, ObjectParameter new_identity)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var mailingAddressParameter = mailingAddress != null ?
                new ObjectParameter("MailingAddress", mailingAddress) :
                new ObjectParameter("MailingAddress", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddReferrer", firstNameParameter, lastNameParameter, suffixParameter, mailingAddressParameter, zipParameter, emailParameter, cellPhoneParameter, new_identity);
        }
    
        public virtual int proc_AddScope(Nullable<int> scopeTypeID, Nullable<int> claimID, Nullable<double> interior, Nullable<double> exterior, Nullable<double> gutter, Nullable<double> roofAmount, Nullable<double> tax, Nullable<double> deductible, Nullable<double> total, Nullable<double> oandP, ObjectParameter new_identity)
        {
            var scopeTypeIDParameter = scopeTypeID.HasValue ?
                new ObjectParameter("ScopeTypeID", scopeTypeID) :
                new ObjectParameter("ScopeTypeID", typeof(int));
    
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var interiorParameter = interior.HasValue ?
                new ObjectParameter("Interior", interior) :
                new ObjectParameter("Interior", typeof(double));
    
            var exteriorParameter = exterior.HasValue ?
                new ObjectParameter("Exterior", exterior) :
                new ObjectParameter("Exterior", typeof(double));
    
            var gutterParameter = gutter.HasValue ?
                new ObjectParameter("Gutter", gutter) :
                new ObjectParameter("Gutter", typeof(double));
    
            var roofAmountParameter = roofAmount.HasValue ?
                new ObjectParameter("RoofAmount", roofAmount) :
                new ObjectParameter("RoofAmount", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var deductibleParameter = deductible.HasValue ?
                new ObjectParameter("Deductible", deductible) :
                new ObjectParameter("Deductible", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var oandPParameter = oandP.HasValue ?
                new ObjectParameter("OandP", oandP) :
                new ObjectParameter("OandP", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddScope", scopeTypeIDParameter, claimIDParameter, interiorParameter, exteriorParameter, gutterParameter, roofAmountParameter, taxParameter, deductibleParameter, totalParameter, oandPParameter, new_identity);
        }
    
        public virtual int proc_AddSurplusSupplies(Nullable<int> claimID, Nullable<int> unitOfMeasureID, Nullable<int> quantity, Nullable<System.DateTime> pickUpDate, Nullable<System.DateTime> dropOffDate, string items, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var unitOfMeasureIDParameter = unitOfMeasureID.HasValue ?
                new ObjectParameter("UnitOfMeasureID", unitOfMeasureID) :
                new ObjectParameter("UnitOfMeasureID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var pickUpDateParameter = pickUpDate.HasValue ?
                new ObjectParameter("PickUpDate", pickUpDate) :
                new ObjectParameter("PickUpDate", typeof(System.DateTime));
    
            var dropOffDateParameter = dropOffDate.HasValue ?
                new ObjectParameter("DropOffDate", dropOffDate) :
                new ObjectParameter("DropOffDate", typeof(System.DateTime));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddSurplusSupplies", claimIDParameter, unitOfMeasureIDParameter, quantityParameter, pickUpDateParameter, dropOffDateParameter, itemsParameter, new_identity);
        }
    
        public virtual int proc_AddVendor(Nullable<int> vendorTypeID, string companyName, string eIN, string contactFirstName, string contactLastName, string suffix, string vendorAddress, string zip, string phone, string companyPhone, string fax, string email, string website, Nullable<System.DateTime> generalLiabilityExpiration, ObjectParameter new_identity)
        {
            var vendorTypeIDParameter = vendorTypeID.HasValue ?
                new ObjectParameter("VendorTypeID", vendorTypeID) :
                new ObjectParameter("VendorTypeID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var eINParameter = eIN != null ?
                new ObjectParameter("EIN", eIN) :
                new ObjectParameter("EIN", typeof(string));
    
            var contactFirstNameParameter = contactFirstName != null ?
                new ObjectParameter("ContactFirstName", contactFirstName) :
                new ObjectParameter("ContactFirstName", typeof(string));
    
            var contactLastNameParameter = contactLastName != null ?
                new ObjectParameter("ContactLastName", contactLastName) :
                new ObjectParameter("ContactLastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var vendorAddressParameter = vendorAddress != null ?
                new ObjectParameter("VendorAddress", vendorAddress) :
                new ObjectParameter("VendorAddress", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var generalLiabilityExpirationParameter = generalLiabilityExpiration.HasValue ?
                new ObjectParameter("GeneralLiabilityExpiration", generalLiabilityExpiration) :
                new ObjectParameter("GeneralLiabilityExpiration", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddVendor", vendorTypeIDParameter, companyNameParameter, eINParameter, contactFirstNameParameter, contactLastNameParameter, suffixParameter, vendorAddressParameter, zipParameter, phoneParameter, companyPhoneParameter, faxParameter, emailParameter, websiteParameter, generalLiabilityExpirationParameter, new_identity);
        }
    
        public virtual int proc_AutoAddClaimContacts(Nullable<int> claimID, ObjectParameter new_identity)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AutoAddClaimContacts", claimIDParameter, new_identity);
        }
    
        public virtual ObjectResult<proc_Get_LU_AdjustmentResults_Result> proc_Get_LU_AdjustmentResults()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_AdjustmentResults_Result>("proc_Get_LU_AdjustmentResults");
        }
    
        public virtual ObjectResult<proc_Get_LU_AppointmentTypes_Result> proc_Get_LU_AppointmentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_AppointmentTypes_Result>("proc_Get_LU_AppointmentTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_ClaimDocumentTypes_Result> proc_Get_LU_ClaimDocumentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_ClaimDocumentTypes_Result>("proc_Get_LU_ClaimDocumentTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_ClaimStatusTypes_Result> proc_Get_LU_ClaimStatusTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_ClaimStatusTypes_Result>("proc_Get_LU_ClaimStatusTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_DamageTypes_Result> proc_Get_LU_DamageTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_DamageTypes_Result>("proc_Get_LU_DamageTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_EmployeeTypes_Result> proc_Get_LU_EmployeeTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_EmployeeTypes_Result>("proc_Get_LU_EmployeeTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_InvoiceTypes_Result> proc_Get_LU_InvoiceTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_InvoiceTypes_Result>("proc_Get_LU_InvoiceTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_KnockResponseTypes_Result> proc_Get_LU_KnockResponseTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_KnockResponseTypes_Result>("proc_Get_LU_KnockResponseTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_LeadTypes_Result> proc_Get_LU_LeadTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_LeadTypes_Result>("proc_Get_LU_LeadTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_PayFrequencies_Result> proc_Get_LU_PayFrequencies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_PayFrequencies_Result>("proc_Get_LU_PayFrequencies");
        }
    
        public virtual ObjectResult<proc_Get_LU_PaymentDescriptions_Result> proc_Get_LU_PaymentDescriptions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_PaymentDescriptions_Result>("proc_Get_LU_PaymentDescriptions");
        }
    
        public virtual ObjectResult<proc_Get_LU_PaymentTypes_Result> proc_Get_LU_PaymentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_PaymentTypes_Result>("proc_Get_LU_PaymentTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_PayTypes_Result> proc_Get_LU_PayTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_PayTypes_Result>("proc_Get_LU_PayTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_Permissions_Result> proc_Get_LU_Permissions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_Permissions_Result>("proc_Get_LU_Permissions");
        }
    
        public virtual ObjectResult<proc_Get_LU_PlaneTypes_Result> proc_Get_LU_PlaneTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_PlaneTypes_Result>("proc_Get_LU_PlaneTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_Products_Result> proc_Get_LU_Products()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_Products_Result>("proc_Get_LU_Products");
        }
    
        public virtual ObjectResult<proc_Get_LU_ProductTypes_Result> proc_Get_LU_ProductTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_ProductTypes_Result>("proc_Get_LU_ProductTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_RidgeMaterialTypes_Result> proc_Get_LU_RidgeMaterialTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_RidgeMaterialTypes_Result>("proc_Get_LU_RidgeMaterialTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_ScopeTypes_Result> proc_Get_LU_ScopeTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_ScopeTypes_Result>("proc_Get_LU_ScopeTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_ServiceTypes_Result> proc_Get_LU_ServiceTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_ServiceTypes_Result>("proc_Get_LU_ServiceTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_ShingleTypes_Result> proc_Get_LU_ShingleTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_ShingleTypes_Result>("proc_Get_LU_ShingleTypes");
        }
    
        public virtual ObjectResult<proc_Get_LU_UnitOfMeasures_Result> proc_Get_LU_UnitOfMeasures()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_UnitOfMeasures_Result>("proc_Get_LU_UnitOfMeasures");
        }
    
        public virtual ObjectResult<proc_Get_LU_VendorTypes_Result> proc_Get_LU_VendorTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_LU_VendorTypes_Result>("proc_Get_LU_VendorTypes");
        }
    
        public virtual ObjectResult<proc_GetAdditionalSuppliesByClaimID_Result> proc_GetAdditionalSuppliesByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAdditionalSuppliesByClaimID_Result>("proc_GetAdditionalSuppliesByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetAddressByID_Result> proc_GetAddressByID(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAddressByID_Result>("proc_GetAddressByID", addressIDParameter);
        }
    
        public virtual ObjectResult<proc_GetAddressesBySalesPersonID_Result> proc_GetAddressesBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAddressesBySalesPersonID_Result>("proc_GetAddressesBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetAdjusterByID_Result> proc_GetAdjusterByID(Nullable<int> adjusterID)
        {
            var adjusterIDParameter = adjusterID.HasValue ?
                new ObjectParameter("AdjusterID", adjusterID) :
                new ObjectParameter("AdjusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAdjusterByID_Result>("proc_GetAdjusterByID", adjusterIDParameter);
        }
    
        public virtual ObjectResult<proc_GetAdjustmentsByAdjusterID_Result> proc_GetAdjustmentsByAdjusterID(Nullable<int> adjusterID)
        {
            var adjusterIDParameter = adjusterID.HasValue ?
                new ObjectParameter("AdjusterID", adjusterID) :
                new ObjectParameter("AdjusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAdjustmentsByAdjusterID_Result>("proc_GetAdjustmentsByAdjusterID", adjusterIDParameter);
        }
    
        public virtual ObjectResult<proc_GetAdjustmentsByClaimID_Result> proc_GetAdjustmentsByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAdjustmentsByClaimID_Result>("proc_GetAdjustmentsByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetAllAdditionalSupplies_Result> proc_GetAllAdditionalSupplies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAdditionalSupplies_Result>("proc_GetAllAdditionalSupplies");
        }
    
        public virtual ObjectResult<proc_GetAllAddresses_Result> proc_GetAllAddresses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAddresses_Result>("proc_GetAllAddresses");
        }
    
        public virtual ObjectResult<proc_GetAllAdjusters_Result> proc_GetAllAdjusters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAdjusters_Result>("proc_GetAllAdjusters");
        }
    
        public virtual ObjectResult<proc_GetAllAdjustments_Result> proc_GetAllAdjustments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAdjustments_Result>("proc_GetAllAdjustments");
        }
    
        public virtual ObjectResult<proc_GetAllCalendarData_Result> proc_GetAllCalendarData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllCalendarData_Result>("proc_GetAllCalendarData");
        }
    
        public virtual ObjectResult<proc_GetAllCallLogs_Result> proc_GetAllCallLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllCallLogs_Result>("proc_GetAllCallLogs");
        }
    
        public virtual ObjectResult<proc_GetAllClaimContacts_Result> proc_GetAllClaimContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClaimContacts_Result>("proc_GetAllClaimContacts");
        }
    
        public virtual ObjectResult<proc_GetAllClaimDocuments_Result> proc_GetAllClaimDocuments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClaimDocuments_Result>("proc_GetAllClaimDocuments");
        }
    
        public virtual ObjectResult<proc_GetAllClaims_Result> proc_GetAllClaims()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClaims_Result>("proc_GetAllClaims");
        }
    
        public virtual ObjectResult<proc_GetAllClaimStatuses_Result> proc_GetAllClaimStatuses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClaimStatuses_Result>("proc_GetAllClaimStatuses");
        }
    
        public virtual ObjectResult<proc_GetAllClaimsToSchedule_Result> proc_GetAllClaimsToSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClaimsToSchedule_Result>("proc_GetAllClaimsToSchedule");
        }
    
        public virtual ObjectResult<proc_GetAllClaimVendors_Result> proc_GetAllClaimVendors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClaimVendors_Result>("proc_GetAllClaimVendors");
        }
    
        public virtual ObjectResult<proc_GetAllClosedClaims_Result> proc_GetAllClosedClaims()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClosedClaims_Result>("proc_GetAllClosedClaims");
        }
    
        public virtual ObjectResult<proc_GetAllCustomers_Result> proc_GetAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllCustomers_Result>("proc_GetAllCustomers");
        }
    
        public virtual ObjectResult<proc_GetAllDamages_Result> proc_GetAllDamages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllDamages_Result>("proc_GetAllDamages");
        }
    
        public virtual ObjectResult<proc_GetAllEmployeeDetails_Result> proc_GetAllEmployeeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllEmployeeDetails_Result>("proc_GetAllEmployeeDetails");
        }
    
        public virtual ObjectResult<proc_GetAllEmployees_Result> proc_GetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllEmployees_Result>("proc_GetAllEmployees");
        }
    
        public virtual ObjectResult<proc_GetAllInactiveClaims_Result> proc_GetAllInactiveClaims()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllInactiveClaims_Result>("proc_GetAllInactiveClaims");
        }
    
        public virtual ObjectResult<proc_GetAllInspections_Result> proc_GetAllInspections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllInspections_Result>("proc_GetAllInspections");
        }
    
        public virtual ObjectResult<proc_GetAllInsuranceCompanies_Result> proc_GetAllInsuranceCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllInsuranceCompanies_Result>("proc_GetAllInsuranceCompanies");
        }
    
        public virtual ObjectResult<proc_GetAllInsuranceCompanyNames_Result> proc_GetAllInsuranceCompanyNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllInsuranceCompanyNames_Result>("proc_GetAllInsuranceCompanyNames");
        }
    
        public virtual ObjectResult<proc_GetAllInvoices_Result> proc_GetAllInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllInvoices_Result>("proc_GetAllInvoices");
        }
    
        public virtual ObjectResult<proc_GetAllKnockerResponses_Result> proc_GetAllKnockerResponses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllKnockerResponses_Result>("proc_GetAllKnockerResponses");
        }
    
        public virtual ObjectResult<proc_GetAllLeads_Result> proc_GetAllLeads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLeads_Result>("proc_GetAllLeads");
        }
    
        public virtual ObjectResult<proc_GetAllNewRoofs_Result> proc_GetAllNewRoofs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllNewRoofs_Result>("proc_GetAllNewRoofs");
        }
    
        public virtual ObjectResult<proc_GetAllOpenClaims_Result> proc_GetAllOpenClaims()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllOpenClaims_Result>("proc_GetAllOpenClaims");
        }
    
        public virtual ObjectResult<proc_GetAllOrderItems_Result> proc_GetAllOrderItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllOrderItems_Result>("proc_GetAllOrderItems");
        }
    
        public virtual ObjectResult<proc_GetAllOrders_Result> proc_GetAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllOrders_Result>("proc_GetAllOrders");
        }
    
        public virtual ObjectResult<proc_GetAllPayments_Result> proc_GetAllPayments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllPayments_Result>("proc_GetAllPayments");
        }
    
        public virtual ObjectResult<proc_GetAllPlanes_Result> proc_GetAllPlanes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllPlanes_Result>("proc_GetAllPlanes");
        }
    
        public virtual ObjectResult<proc_GetAllReferrers_Result> proc_GetAllReferrers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllReferrers_Result>("proc_GetAllReferrers");
        }
    
        public virtual ObjectResult<proc_GetAllScopes_Result> proc_GetAllScopes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllScopes_Result>("proc_GetAllScopes");
        }
    
        public virtual ObjectResult<proc_GetAllSurplusSupplies_Result> proc_GetAllSurplusSupplies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllSurplusSupplies_Result>("proc_GetAllSurplusSupplies");
        }
    
        public virtual ObjectResult<proc_GetAllUsers_Result> proc_GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllUsers_Result>("proc_GetAllUsers");
        }
    
        public virtual ObjectResult<proc_GetAllVendors_Result> proc_GetAllVendors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllVendors_Result>("proc_GetAllVendors");
        }
    
        public virtual ObjectResult<proc_GetCalendarDataByEmployeeID_Result> proc_GetCalendarDataByEmployeeID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetCalendarDataByEmployeeID_Result>("proc_GetCalendarDataByEmployeeID", employeeIDParameter);
        }
    
        public virtual ObjectResult<proc_GetCallLogsByClaimID_Result> proc_GetCallLogsByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetCallLogsByClaimID_Result>("proc_GetCallLogsByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetClaimByClaimID_Result> proc_GetClaimByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetClaimByClaimID_Result>("proc_GetClaimByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetClaimContactsByClaimID_Result> proc_GetClaimContactsByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetClaimContactsByClaimID_Result>("proc_GetClaimContactsByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetClaimDocumentsByClaimID_Result> proc_GetClaimDocumentsByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetClaimDocumentsByClaimID_Result>("proc_GetClaimDocumentsByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetClaimStatusByClaimID_Result> proc_GetClaimStatusByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetClaimStatusByClaimID_Result>("proc_GetClaimStatusByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetClaimStatusDateByTypeIDAndClaimID_Result> proc_GetClaimStatusDateByTypeIDAndClaimID(Nullable<int> claimStatusTypeID, Nullable<int> claimID)
        {
            var claimStatusTypeIDParameter = claimStatusTypeID.HasValue ?
                new ObjectParameter("ClaimStatusTypeID", claimStatusTypeID) :
                new ObjectParameter("ClaimStatusTypeID", typeof(int));
    
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetClaimStatusDateByTypeIDAndClaimID_Result>("proc_GetClaimStatusDateByTypeIDAndClaimID", claimStatusTypeIDParameter, claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetClaimVendorsByClaimID_Result> proc_GetClaimVendorsByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetClaimVendorsByClaimID_Result>("proc_GetClaimVendorsByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetClosedClaimsBySalesPersonID_Result> proc_GetClosedClaimsBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetClosedClaimsBySalesPersonID_Result>("proc_GetClosedClaimsBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetCustomerByID_Result> proc_GetCustomerByID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetCustomerByID_Result>("proc_GetCustomerByID", customerIDParameter);
        }
    
        public virtual ObjectResult<proc_GetCustomersBySalesPersonID_Result> proc_GetCustomersBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetCustomersBySalesPersonID_Result>("proc_GetCustomersBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetEmployeeByID_Result> proc_GetEmployeeByID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetEmployeeByID_Result>("proc_GetEmployeeByID", employeeIDParameter);
        }
    
        public virtual ObjectResult<proc_GetEmployeesByTypeID_Result> proc_GetEmployeesByTypeID(Nullable<int> employeeTypeID)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetEmployeesByTypeID_Result>("proc_GetEmployeesByTypeID", employeeTypeIDParameter);
        }
    
        public virtual ObjectResult<proc_GetInactiveClaimsBySalesPersonID_Result> proc_GetInactiveClaimsBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInactiveClaimsBySalesPersonID_Result>("proc_GetInactiveClaimsBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetInspectionByID_Result> proc_GetInspectionByID(Nullable<int> inspectionID)
        {
            var inspectionIDParameter = inspectionID.HasValue ?
                new ObjectParameter("InspectionID", inspectionID) :
                new ObjectParameter("InspectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInspectionByID_Result>("proc_GetInspectionByID", inspectionIDParameter);
        }
    
        public virtual ObjectResult<proc_GetInspectionsByClaimID_Result> proc_GetInspectionsByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInspectionsByClaimID_Result>("proc_GetInspectionsByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetInsuranceCompanyByID_Result> proc_GetInsuranceCompanyByID(Nullable<int> insuranceCompanyID)
        {
            var insuranceCompanyIDParameter = insuranceCompanyID.HasValue ?
                new ObjectParameter("InsuranceCompanyID", insuranceCompanyID) :
                new ObjectParameter("InsuranceCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInsuranceCompanyByID_Result>("proc_GetInsuranceCompanyByID", insuranceCompanyIDParameter);
        }
    
        public virtual ObjectResult<proc_GetInvoicesByClaimID_Result> proc_GetInvoicesByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetInvoicesByClaimID_Result>("proc_GetInvoicesByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetKnockerResponseByID_Result> proc_GetKnockerResponseByID(Nullable<int> knockerResponseID)
        {
            var knockerResponseIDParameter = knockerResponseID.HasValue ?
                new ObjectParameter("KnockerResponseID", knockerResponseID) :
                new ObjectParameter("KnockerResponseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetKnockerResponseByID_Result>("proc_GetKnockerResponseByID", knockerResponseIDParameter);
        }
    
        public virtual ObjectResult<proc_GetKnockerResponsesByKnockerID_Result> proc_GetKnockerResponsesByKnockerID(Nullable<int> knockerID)
        {
            var knockerIDParameter = knockerID.HasValue ?
                new ObjectParameter("KnockerID", knockerID) :
                new ObjectParameter("KnockerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetKnockerResponsesByKnockerID_Result>("proc_GetKnockerResponsesByKnockerID", knockerIDParameter);
        }
    
        public virtual ObjectResult<proc_GetKnockerResponsesByTypeID_Result> proc_GetKnockerResponsesByTypeID(Nullable<int> knockResponseTypeID)
        {
            var knockResponseTypeIDParameter = knockResponseTypeID.HasValue ?
                new ObjectParameter("KnockResponseTypeID", knockResponseTypeID) :
                new ObjectParameter("KnockResponseTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetKnockerResponsesByTypeID_Result>("proc_GetKnockerResponsesByTypeID", knockResponseTypeIDParameter);
        }
    
        public virtual ObjectResult<proc_GetLeadByLeadID_Result> proc_GetLeadByLeadID(Nullable<int> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetLeadByLeadID_Result>("proc_GetLeadByLeadID", leadIDParameter);
        }
    
        public virtual ObjectResult<proc_GetLeadsBySalesPersonID_Result> proc_GetLeadsBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetLeadsBySalesPersonID_Result>("proc_GetLeadsBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetLeadsByStatus_Result> proc_GetLeadsByStatus(string status, Nullable<int> salesPersonID)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetLeadsByStatus_Result>("proc_GetLeadsByStatus", statusParameter, salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetLeadsWithNoClaim_Result> proc_GetLeadsWithNoClaim()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetLeadsWithNoClaim_Result>("proc_GetLeadsWithNoClaim");
        }
    
        public virtual ObjectResult<proc_GetMostRecentDateByClaimID_Result> proc_GetMostRecentDateByClaimID(Nullable<int> claimID, ObjectParameter mostRecentDate)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetMostRecentDateByClaimID_Result>("proc_GetMostRecentDateByClaimID", claimIDParameter, mostRecentDate);
        }
    
        public virtual ObjectResult<proc_GetNewRoofByClaimID_Result> proc_GetNewRoofByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetNewRoofByClaimID_Result>("proc_GetNewRoofByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetOldLeadsBySalesPersonID_Result> proc_GetOldLeadsBySalesPersonID(Nullable<int> numberOfDays, Nullable<int> salesPersonID)
        {
            var numberOfDaysParameter = numberOfDays.HasValue ?
                new ObjectParameter("NumberOfDays", numberOfDays) :
                new ObjectParameter("NumberOfDays", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetOldLeadsBySalesPersonID_Result>("proc_GetOldLeadsBySalesPersonID", numberOfDaysParameter, salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetOpenClaimsBySalesPersonID_Result> proc_GetOpenClaimsBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetOpenClaimsBySalesPersonID_Result>("proc_GetOpenClaimsBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetOrderItemsByOrderID_Result> proc_GetOrderItemsByOrderID(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetOrderItemsByOrderID_Result>("proc_GetOrderItemsByOrderID", orderIDParameter);
        }
    
        public virtual ObjectResult<proc_GetOrdersByClaimID_Result> proc_GetOrdersByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetOrdersByClaimID_Result>("proc_GetOrdersByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetOtherClaimsToSchedule_Result> proc_GetOtherClaimsToSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetOtherClaimsToSchedule_Result>("proc_GetOtherClaimsToSchedule");
        }
    
        public virtual ObjectResult<proc_GetPaymentsByClaimID_Result> proc_GetPaymentsByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPaymentsByClaimID_Result>("proc_GetPaymentsByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetPlanesByInspectionID_Result> proc_GetPlanesByInspectionID(Nullable<int> inspectionID)
        {
            var inspectionIDParameter = inspectionID.HasValue ?
                new ObjectParameter("InspectionID", inspectionID) :
                new ObjectParameter("InspectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetPlanesByInspectionID_Result>("proc_GetPlanesByInspectionID", inspectionIDParameter);
        }
    
        public virtual ObjectResult<proc_GetReferrerByID_Result> proc_GetReferrerByID(Nullable<int> referrerID)
        {
            var referrerIDParameter = referrerID.HasValue ?
                new ObjectParameter("ReferrerID", referrerID) :
                new ObjectParameter("ReferrerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetReferrerByID_Result>("proc_GetReferrerByID", referrerIDParameter);
        }
    
        public virtual ObjectResult<proc_GetRoofClaimsToSchedule_Result> proc_GetRoofClaimsToSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRoofClaimsToSchedule_Result>("proc_GetRoofClaimsToSchedule");
        }
    
        public virtual ObjectResult<proc_GetScopesByClaimID_Result> proc_GetScopesByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetScopesByClaimID_Result>("proc_GetScopesByClaimID", claimIDParameter);
        }
    
        public virtual int proc_GetSumOfInvoicesByClaimID(Nullable<int> claimID, ObjectParameter result)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetSumOfInvoicesByClaimID", claimIDParameter, result);
        }
    
        public virtual int proc_GetSumOfPaymentsByClaimID(Nullable<int> claimID, ObjectParameter result)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetSumOfPaymentsByClaimID", claimIDParameter, result);
        }
    
        public virtual ObjectResult<proc_GetSurplusSuppliesByClaimID_Result> proc_GetSurplusSuppliesByClaimID(Nullable<int> claimID)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetSurplusSuppliesByClaimID_Result>("proc_GetSurplusSuppliesByClaimID", claimIDParameter);
        }
    
        public virtual ObjectResult<proc_GetUser_Result> proc_GetUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetUser_Result>("proc_GetUser", usernameParameter);
        }
    
        public virtual ObjectResult<proc_GetVendorByID_Result> proc_GetVendorByID(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetVendorByID_Result>("proc_GetVendorByID", vendorIDParameter);
        }
    
        public virtual int proc_RegisterUser(Nullable<int> employeeID, string pass, Nullable<int> permissionID, ObjectParameter new_identity)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_RegisterUser", employeeIDParameter, passParameter, permissionIDParameter, new_identity);
        }
    
        public virtual int proc_UpdateAdditionalSupplies(Nullable<int> additionalSuppliesID, Nullable<System.DateTime> pickUpDate, Nullable<System.DateTime> dropOffDate, string items, Nullable<double> cost, string receiptImagePath, ObjectParameter successFlag)
        {
            var additionalSuppliesIDParameter = additionalSuppliesID.HasValue ?
                new ObjectParameter("AdditionalSuppliesID", additionalSuppliesID) :
                new ObjectParameter("AdditionalSuppliesID", typeof(int));
    
            var pickUpDateParameter = pickUpDate.HasValue ?
                new ObjectParameter("PickUpDate", pickUpDate) :
                new ObjectParameter("PickUpDate", typeof(System.DateTime));
    
            var dropOffDateParameter = dropOffDate.HasValue ?
                new ObjectParameter("DropOffDate", dropOffDate) :
                new ObjectParameter("DropOffDate", typeof(System.DateTime));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(double));
    
            var receiptImagePathParameter = receiptImagePath != null ?
                new ObjectParameter("ReceiptImagePath", receiptImagePath) :
                new ObjectParameter("ReceiptImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateAdditionalSupplies", additionalSuppliesIDParameter, pickUpDateParameter, dropOffDateParameter, itemsParameter, costParameter, receiptImagePathParameter, successFlag);
        }
    
        public virtual int proc_UpdateAddress(Nullable<int> addressID, string address, string zip, ObjectParameter successFlag)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateAddress", addressIDParameter, addressParameter, zipParameter, successFlag);
        }
    
        public virtual int proc_UpdateAdjuster(Nullable<int> adjusterID, string firstName, string lastName, string suffix, string phoneNumber, string phoneExt, string email, Nullable<int> insuranceCompanyID, string comments, ObjectParameter successFlag)
        {
            var adjusterIDParameter = adjusterID.HasValue ?
                new ObjectParameter("AdjusterID", adjusterID) :
                new ObjectParameter("AdjusterID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneExtParameter = phoneExt != null ?
                new ObjectParameter("PhoneExt", phoneExt) :
                new ObjectParameter("PhoneExt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var insuranceCompanyIDParameter = insuranceCompanyID.HasValue ?
                new ObjectParameter("InsuranceCompanyID", insuranceCompanyID) :
                new ObjectParameter("InsuranceCompanyID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateAdjuster", adjusterIDParameter, firstNameParameter, lastNameParameter, suffixParameter, phoneNumberParameter, phoneExtParameter, emailParameter, insuranceCompanyIDParameter, commentsParameter, successFlag);
        }
    
        public virtual int proc_UpdateAdjustment(Nullable<int> adjustmentID, Nullable<bool> gutters, Nullable<bool> exterior, Nullable<bool> interior, Nullable<int> adjustmentResultID, Nullable<System.DateTime> adjustmentDate, string adjustmentComment, ObjectParameter successFlag)
        {
            var adjustmentIDParameter = adjustmentID.HasValue ?
                new ObjectParameter("AdjustmentID", adjustmentID) :
                new ObjectParameter("AdjustmentID", typeof(int));
    
            var guttersParameter = gutters.HasValue ?
                new ObjectParameter("Gutters", gutters) :
                new ObjectParameter("Gutters", typeof(bool));
    
            var exteriorParameter = exterior.HasValue ?
                new ObjectParameter("Exterior", exterior) :
                new ObjectParameter("Exterior", typeof(bool));
    
            var interiorParameter = interior.HasValue ?
                new ObjectParameter("Interior", interior) :
                new ObjectParameter("Interior", typeof(bool));
    
            var adjustmentResultIDParameter = adjustmentResultID.HasValue ?
                new ObjectParameter("AdjustmentResultID", adjustmentResultID) :
                new ObjectParameter("AdjustmentResultID", typeof(int));
    
            var adjustmentDateParameter = adjustmentDate.HasValue ?
                new ObjectParameter("AdjustmentDate", adjustmentDate) :
                new ObjectParameter("AdjustmentDate", typeof(System.DateTime));
    
            var adjustmentCommentParameter = adjustmentComment != null ?
                new ObjectParameter("AdjustmentComment", adjustmentComment) :
                new ObjectParameter("AdjustmentComment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateAdjustment", adjustmentIDParameter, guttersParameter, exteriorParameter, interiorParameter, adjustmentResultIDParameter, adjustmentDateParameter, adjustmentCommentParameter, successFlag);
        }
    
        public virtual int proc_UpdateCalendarData(Nullable<int> entryID, Nullable<int> appointmentTypeID, Nullable<int> employeeID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> claimID, Nullable<int> leadID, string note, ObjectParameter successFlag)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var appointmentTypeIDParameter = appointmentTypeID.HasValue ?
                new ObjectParameter("AppointmentTypeID", appointmentTypeID) :
                new ObjectParameter("AppointmentTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateCalendarData", entryIDParameter, appointmentTypeIDParameter, employeeIDParameter, startTimeParameter, endTimeParameter, claimIDParameter, leadIDParameter, noteParameter, successFlag);
        }
    
        public virtual int proc_UpdateCallLog(Nullable<int> callLogID, string whoWasCalled, string reasonForCall, string whoAnswered, string callResults, ObjectParameter successFlag)
        {
            var callLogIDParameter = callLogID.HasValue ?
                new ObjectParameter("CallLogID", callLogID) :
                new ObjectParameter("CallLogID", typeof(int));
    
            var whoWasCalledParameter = whoWasCalled != null ?
                new ObjectParameter("WhoWasCalled", whoWasCalled) :
                new ObjectParameter("WhoWasCalled", typeof(string));
    
            var reasonForCallParameter = reasonForCall != null ?
                new ObjectParameter("ReasonForCall", reasonForCall) :
                new ObjectParameter("ReasonForCall", typeof(string));
    
            var whoAnsweredParameter = whoAnswered != null ?
                new ObjectParameter("WhoAnswered", whoAnswered) :
                new ObjectParameter("WhoAnswered", typeof(string));
    
            var callResultsParameter = callResults != null ?
                new ObjectParameter("CallResults", callResults) :
                new ObjectParameter("CallResults", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateCallLog", callLogIDParameter, whoWasCalledParameter, reasonForCallParameter, whoAnsweredParameter, callResultsParameter, successFlag);
        }
    
        public virtual int proc_UpdateClaim(Nullable<int> claimID, Nullable<int> customerID, Nullable<int> billingID, Nullable<int> propertyID, Nullable<int> insuranceCompanyID, string insuranceClaimNumber, Nullable<System.DateTime> lossDate, string mortgageCompany, string mortgageAccount, Nullable<bool> contractSigned, ObjectParameter successFlag)
        {
            var claimIDParameter = claimID.HasValue ?
                new ObjectParameter("ClaimID", claimID) :
                new ObjectParameter("ClaimID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var insuranceCompanyIDParameter = insuranceCompanyID.HasValue ?
                new ObjectParameter("InsuranceCompanyID", insuranceCompanyID) :
                new ObjectParameter("InsuranceCompanyID", typeof(int));
    
            var insuranceClaimNumberParameter = insuranceClaimNumber != null ?
                new ObjectParameter("InsuranceClaimNumber", insuranceClaimNumber) :
                new ObjectParameter("InsuranceClaimNumber", typeof(string));
    
            var lossDateParameter = lossDate.HasValue ?
                new ObjectParameter("LossDate", lossDate) :
                new ObjectParameter("LossDate", typeof(System.DateTime));
    
            var mortgageCompanyParameter = mortgageCompany != null ?
                new ObjectParameter("MortgageCompany", mortgageCompany) :
                new ObjectParameter("MortgageCompany", typeof(string));
    
            var mortgageAccountParameter = mortgageAccount != null ?
                new ObjectParameter("MortgageAccount", mortgageAccount) :
                new ObjectParameter("MortgageAccount", typeof(string));
    
            var contractSignedParameter = contractSigned.HasValue ?
                new ObjectParameter("ContractSigned", contractSigned) :
                new ObjectParameter("ContractSigned", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateClaim", claimIDParameter, customerIDParameter, billingIDParameter, propertyIDParameter, insuranceCompanyIDParameter, insuranceClaimNumberParameter, lossDateParameter, mortgageCompanyParameter, mortgageAccountParameter, contractSignedParameter, successFlag);
        }
    
        public virtual int proc_UpdateClaimContacts(Nullable<int> claimContactID, Nullable<int> customerID, Nullable<int> knockerID, Nullable<int> salesPersonID, Nullable<int> supervisorID, Nullable<int> salesManagerID, Nullable<int> adjusterID, ObjectParameter successFlag)
        {
            var claimContactIDParameter = claimContactID.HasValue ?
                new ObjectParameter("ClaimContactID", claimContactID) :
                new ObjectParameter("ClaimContactID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var knockerIDParameter = knockerID.HasValue ?
                new ObjectParameter("KnockerID", knockerID) :
                new ObjectParameter("KnockerID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var supervisorIDParameter = supervisorID.HasValue ?
                new ObjectParameter("SupervisorID", supervisorID) :
                new ObjectParameter("SupervisorID", typeof(int));
    
            var salesManagerIDParameter = salesManagerID.HasValue ?
                new ObjectParameter("SalesManagerID", salesManagerID) :
                new ObjectParameter("SalesManagerID", typeof(int));
    
            var adjusterIDParameter = adjusterID.HasValue ?
                new ObjectParameter("AdjusterID", adjusterID) :
                new ObjectParameter("AdjusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateClaimContacts", claimContactIDParameter, customerIDParameter, knockerIDParameter, salesPersonIDParameter, supervisorIDParameter, salesManagerIDParameter, adjusterIDParameter, successFlag);
        }
    
        public virtual int proc_UpdateClaimDocument(Nullable<int> documentID, string filePath, string fileName, string fileExt, Nullable<int> docTypeID, Nullable<System.DateTime> documentDate, string signatureImagePath, Nullable<int> numSignatures, string initialImagePath, Nullable<int> numInitials, ObjectParameter successFlag)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileExtParameter = fileExt != null ?
                new ObjectParameter("FileExt", fileExt) :
                new ObjectParameter("FileExt", typeof(string));
    
            var docTypeIDParameter = docTypeID.HasValue ?
                new ObjectParameter("DocTypeID", docTypeID) :
                new ObjectParameter("DocTypeID", typeof(int));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var signatureImagePathParameter = signatureImagePath != null ?
                new ObjectParameter("SignatureImagePath", signatureImagePath) :
                new ObjectParameter("SignatureImagePath", typeof(string));
    
            var numSignaturesParameter = numSignatures.HasValue ?
                new ObjectParameter("NumSignatures", numSignatures) :
                new ObjectParameter("NumSignatures", typeof(int));
    
            var initialImagePathParameter = initialImagePath != null ?
                new ObjectParameter("InitialImagePath", initialImagePath) :
                new ObjectParameter("InitialImagePath", typeof(string));
    
            var numInitialsParameter = numInitials.HasValue ?
                new ObjectParameter("NumInitials", numInitials) :
                new ObjectParameter("NumInitials", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateClaimDocument", documentIDParameter, filePathParameter, fileNameParameter, fileExtParameter, docTypeIDParameter, documentDateParameter, signatureImagePathParameter, numSignaturesParameter, initialImagePathParameter, numInitialsParameter, successFlag);
        }
    
        public virtual int proc_UpdateClaimStatuses(Nullable<int> claimStatusID, Nullable<int> claimStatusTypeID, Nullable<System.DateTime> claimStatusDate, ObjectParameter successFlag)
        {
            var claimStatusIDParameter = claimStatusID.HasValue ?
                new ObjectParameter("ClaimStatusID", claimStatusID) :
                new ObjectParameter("ClaimStatusID", typeof(int));
    
            var claimStatusTypeIDParameter = claimStatusTypeID.HasValue ?
                new ObjectParameter("ClaimStatusTypeID", claimStatusTypeID) :
                new ObjectParameter("ClaimStatusTypeID", typeof(int));
    
            var claimStatusDateParameter = claimStatusDate.HasValue ?
                new ObjectParameter("ClaimStatusDate", claimStatusDate) :
                new ObjectParameter("ClaimStatusDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateClaimStatuses", claimStatusIDParameter, claimStatusTypeIDParameter, claimStatusDateParameter, successFlag);
        }
    
        public virtual int proc_UpdateCustomer(Nullable<int> customerID, string firstName, string middleName, string lastName, string suffix, string primaryNumber, string secondaryNumber, string email, Nullable<bool> mailPromos, ObjectParameter successFlag)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var primaryNumberParameter = primaryNumber != null ?
                new ObjectParameter("PrimaryNumber", primaryNumber) :
                new ObjectParameter("PrimaryNumber", typeof(string));
    
            var secondaryNumberParameter = secondaryNumber != null ?
                new ObjectParameter("SecondaryNumber", secondaryNumber) :
                new ObjectParameter("SecondaryNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mailPromosParameter = mailPromos.HasValue ?
                new ObjectParameter("MailPromos", mailPromos) :
                new ObjectParameter("MailPromos", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateCustomer", customerIDParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, primaryNumberParameter, secondaryNumberParameter, emailParameter, mailPromosParameter, successFlag);
        }
    
        public virtual int proc_UpdateDamage(Nullable<int> damageID, Nullable<int> planeID, Nullable<int> damageTypeID, Nullable<int> documentID, Nullable<int> damageMeasurement, Nullable<int> xCoordinate, Nullable<int> yCoordinate, ObjectParameter successFlag)
        {
            var damageIDParameter = damageID.HasValue ?
                new ObjectParameter("DamageID", damageID) :
                new ObjectParameter("DamageID", typeof(int));
    
            var planeIDParameter = planeID.HasValue ?
                new ObjectParameter("PlaneID", planeID) :
                new ObjectParameter("PlaneID", typeof(int));
    
            var damageTypeIDParameter = damageTypeID.HasValue ?
                new ObjectParameter("DamageTypeID", damageTypeID) :
                new ObjectParameter("DamageTypeID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var damageMeasurementParameter = damageMeasurement.HasValue ?
                new ObjectParameter("DamageMeasurement", damageMeasurement) :
                new ObjectParameter("DamageMeasurement", typeof(int));
    
            var xCoordinateParameter = xCoordinate.HasValue ?
                new ObjectParameter("xCoordinate", xCoordinate) :
                new ObjectParameter("xCoordinate", typeof(int));
    
            var yCoordinateParameter = yCoordinate.HasValue ?
                new ObjectParameter("yCoordinate", yCoordinate) :
                new ObjectParameter("yCoordinate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateDamage", damageIDParameter, planeIDParameter, damageTypeIDParameter, documentIDParameter, damageMeasurementParameter, xCoordinateParameter, yCoordinateParameter, successFlag);
        }
    
        public virtual int proc_UpdateEmployee(Nullable<int> employeeID, Nullable<int> employeeTypeID, string firstName, string lastName, string suffix, string email, string cellPhone, Nullable<bool> active, ObjectParameter successFlag)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateEmployee", employeeIDParameter, employeeTypeIDParameter, firstNameParameter, lastNameParameter, suffixParameter, emailParameter, cellPhoneParameter, activeParameter, successFlag);
        }
    
        public virtual int proc_UpdateEmployeeDetails(Nullable<int> employeeDetailsID, string mailingAddress, string zip, Nullable<System.DateTime> dateHired, Nullable<System.DateTime> dateReleased, string shirtSize, Nullable<double> payRate, Nullable<int> payTypeID, Nullable<int> payFrequencyID, Nullable<bool> previousEmployee, string dLPhotoPath, string companyPhotoPath, string signaturePath, ObjectParameter success)
        {
            var employeeDetailsIDParameter = employeeDetailsID.HasValue ?
                new ObjectParameter("EmployeeDetailsID", employeeDetailsID) :
                new ObjectParameter("EmployeeDetailsID", typeof(int));
    
            var mailingAddressParameter = mailingAddress != null ?
                new ObjectParameter("MailingAddress", mailingAddress) :
                new ObjectParameter("MailingAddress", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var dateHiredParameter = dateHired.HasValue ?
                new ObjectParameter("DateHired", dateHired) :
                new ObjectParameter("DateHired", typeof(System.DateTime));
    
            var dateReleasedParameter = dateReleased.HasValue ?
                new ObjectParameter("DateReleased", dateReleased) :
                new ObjectParameter("DateReleased", typeof(System.DateTime));
    
            var shirtSizeParameter = shirtSize != null ?
                new ObjectParameter("ShirtSize", shirtSize) :
                new ObjectParameter("ShirtSize", typeof(string));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("PayRate", payRate) :
                new ObjectParameter("PayRate", typeof(double));
    
            var payTypeIDParameter = payTypeID.HasValue ?
                new ObjectParameter("PayTypeID", payTypeID) :
                new ObjectParameter("PayTypeID", typeof(int));
    
            var payFrequencyIDParameter = payFrequencyID.HasValue ?
                new ObjectParameter("PayFrequencyID", payFrequencyID) :
                new ObjectParameter("PayFrequencyID", typeof(int));
    
            var previousEmployeeParameter = previousEmployee.HasValue ?
                new ObjectParameter("PreviousEmployee", previousEmployee) :
                new ObjectParameter("PreviousEmployee", typeof(bool));
    
            var dLPhotoPathParameter = dLPhotoPath != null ?
                new ObjectParameter("DLPhotoPath", dLPhotoPath) :
                new ObjectParameter("DLPhotoPath", typeof(string));
    
            var companyPhotoPathParameter = companyPhotoPath != null ?
                new ObjectParameter("CompanyPhotoPath", companyPhotoPath) :
                new ObjectParameter("CompanyPhotoPath", typeof(string));
    
            var signaturePathParameter = signaturePath != null ?
                new ObjectParameter("SignaturePath", signaturePath) :
                new ObjectParameter("SignaturePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateEmployeeDetails", employeeDetailsIDParameter, mailingAddressParameter, zipParameter, dateHiredParameter, dateReleasedParameter, shirtSizeParameter, payRateParameter, payTypeIDParameter, payFrequencyIDParameter, previousEmployeeParameter, dLPhotoPathParameter, companyPhotoPathParameter, signaturePathParameter, success);
        }
    
        public virtual int proc_UpdateInspection(Nullable<int> inspectionID, Nullable<int> ridgeMaterialTypeID, Nullable<int> shingleTypeID, Nullable<System.DateTime> inspectionDate, Nullable<bool> skyLights, Nullable<bool> leaks, Nullable<bool> gutterDamage, Nullable<bool> drivewayDamage, Nullable<bool> magneticRollers, Nullable<bool> iceWaterShield, Nullable<bool> emergencyRepair, Nullable<double> emergencyRepairAmount, Nullable<bool> qualityControl, Nullable<bool> protectLandscaping, Nullable<bool> removeTrash, Nullable<bool> furnishPermit, Nullable<bool> coverPool, Nullable<bool> interiorDamage, Nullable<bool> exteriorDamage, Nullable<bool> lightningProtection, Nullable<bool> tearOff, Nullable<bool> satellite, Nullable<bool> solarPanels, Nullable<int> roofAge, string comments, ObjectParameter successFlag)
        {
            var inspectionIDParameter = inspectionID.HasValue ?
                new ObjectParameter("InspectionID", inspectionID) :
                new ObjectParameter("InspectionID", typeof(int));
    
            var ridgeMaterialTypeIDParameter = ridgeMaterialTypeID.HasValue ?
                new ObjectParameter("RidgeMaterialTypeID", ridgeMaterialTypeID) :
                new ObjectParameter("RidgeMaterialTypeID", typeof(int));
    
            var shingleTypeIDParameter = shingleTypeID.HasValue ?
                new ObjectParameter("ShingleTypeID", shingleTypeID) :
                new ObjectParameter("ShingleTypeID", typeof(int));
    
            var inspectionDateParameter = inspectionDate.HasValue ?
                new ObjectParameter("InspectionDate", inspectionDate) :
                new ObjectParameter("InspectionDate", typeof(System.DateTime));
    
            var skyLightsParameter = skyLights.HasValue ?
                new ObjectParameter("SkyLights", skyLights) :
                new ObjectParameter("SkyLights", typeof(bool));
    
            var leaksParameter = leaks.HasValue ?
                new ObjectParameter("Leaks", leaks) :
                new ObjectParameter("Leaks", typeof(bool));
    
            var gutterDamageParameter = gutterDamage.HasValue ?
                new ObjectParameter("GutterDamage", gutterDamage) :
                new ObjectParameter("GutterDamage", typeof(bool));
    
            var drivewayDamageParameter = drivewayDamage.HasValue ?
                new ObjectParameter("DrivewayDamage", drivewayDamage) :
                new ObjectParameter("DrivewayDamage", typeof(bool));
    
            var magneticRollersParameter = magneticRollers.HasValue ?
                new ObjectParameter("MagneticRollers", magneticRollers) :
                new ObjectParameter("MagneticRollers", typeof(bool));
    
            var iceWaterShieldParameter = iceWaterShield.HasValue ?
                new ObjectParameter("IceWaterShield", iceWaterShield) :
                new ObjectParameter("IceWaterShield", typeof(bool));
    
            var emergencyRepairParameter = emergencyRepair.HasValue ?
                new ObjectParameter("EmergencyRepair", emergencyRepair) :
                new ObjectParameter("EmergencyRepair", typeof(bool));
    
            var emergencyRepairAmountParameter = emergencyRepairAmount.HasValue ?
                new ObjectParameter("EmergencyRepairAmount", emergencyRepairAmount) :
                new ObjectParameter("EmergencyRepairAmount", typeof(double));
    
            var qualityControlParameter = qualityControl.HasValue ?
                new ObjectParameter("QualityControl", qualityControl) :
                new ObjectParameter("QualityControl", typeof(bool));
    
            var protectLandscapingParameter = protectLandscaping.HasValue ?
                new ObjectParameter("ProtectLandscaping", protectLandscaping) :
                new ObjectParameter("ProtectLandscaping", typeof(bool));
    
            var removeTrashParameter = removeTrash.HasValue ?
                new ObjectParameter("RemoveTrash", removeTrash) :
                new ObjectParameter("RemoveTrash", typeof(bool));
    
            var furnishPermitParameter = furnishPermit.HasValue ?
                new ObjectParameter("FurnishPermit", furnishPermit) :
                new ObjectParameter("FurnishPermit", typeof(bool));
    
            var coverPoolParameter = coverPool.HasValue ?
                new ObjectParameter("CoverPool", coverPool) :
                new ObjectParameter("CoverPool", typeof(bool));
    
            var interiorDamageParameter = interiorDamage.HasValue ?
                new ObjectParameter("InteriorDamage", interiorDamage) :
                new ObjectParameter("InteriorDamage", typeof(bool));
    
            var exteriorDamageParameter = exteriorDamage.HasValue ?
                new ObjectParameter("ExteriorDamage", exteriorDamage) :
                new ObjectParameter("ExteriorDamage", typeof(bool));
    
            var lightningProtectionParameter = lightningProtection.HasValue ?
                new ObjectParameter("LightningProtection", lightningProtection) :
                new ObjectParameter("LightningProtection", typeof(bool));
    
            var tearOffParameter = tearOff.HasValue ?
                new ObjectParameter("TearOff", tearOff) :
                new ObjectParameter("TearOff", typeof(bool));
    
            var satelliteParameter = satellite.HasValue ?
                new ObjectParameter("Satellite", satellite) :
                new ObjectParameter("Satellite", typeof(bool));
    
            var solarPanelsParameter = solarPanels.HasValue ?
                new ObjectParameter("SolarPanels", solarPanels) :
                new ObjectParameter("SolarPanels", typeof(bool));
    
            var roofAgeParameter = roofAge.HasValue ?
                new ObjectParameter("RoofAge", roofAge) :
                new ObjectParameter("RoofAge", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateInspection", inspectionIDParameter, ridgeMaterialTypeIDParameter, shingleTypeIDParameter, inspectionDateParameter, skyLightsParameter, leaksParameter, gutterDamageParameter, drivewayDamageParameter, magneticRollersParameter, iceWaterShieldParameter, emergencyRepairParameter, emergencyRepairAmountParameter, qualityControlParameter, protectLandscapingParameter, removeTrashParameter, furnishPermitParameter, coverPoolParameter, interiorDamageParameter, exteriorDamageParameter, lightningProtectionParameter, tearOffParameter, satelliteParameter, solarPanelsParameter, roofAgeParameter, commentsParameter, successFlag);
        }
    
        public virtual int proc_UpdateInsuranceCompany(Nullable<int> insuranceCompanyID, string companyName, string address, string zip, string claimPhoneNumber, string claimPhoneExt, string faxNumber, string faxExt, string email, Nullable<bool> independent, ObjectParameter successFlag)
        {
            var insuranceCompanyIDParameter = insuranceCompanyID.HasValue ?
                new ObjectParameter("InsuranceCompanyID", insuranceCompanyID) :
                new ObjectParameter("InsuranceCompanyID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var claimPhoneNumberParameter = claimPhoneNumber != null ?
                new ObjectParameter("ClaimPhoneNumber", claimPhoneNumber) :
                new ObjectParameter("ClaimPhoneNumber", typeof(string));
    
            var claimPhoneExtParameter = claimPhoneExt != null ?
                new ObjectParameter("ClaimPhoneExt", claimPhoneExt) :
                new ObjectParameter("ClaimPhoneExt", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var faxExtParameter = faxExt != null ?
                new ObjectParameter("FaxExt", faxExt) :
                new ObjectParameter("FaxExt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var independentParameter = independent.HasValue ?
                new ObjectParameter("Independent", independent) :
                new ObjectParameter("Independent", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateInsuranceCompany", insuranceCompanyIDParameter, companyNameParameter, addressParameter, zipParameter, claimPhoneNumberParameter, claimPhoneExtParameter, faxNumberParameter, faxExtParameter, emailParameter, independentParameter, successFlag);
        }
    
        public virtual int proc_UpdateInvoice(Nullable<int> invoiceID, Nullable<int> invoiceTypeID, Nullable<double> invoiceAmount, Nullable<System.DateTime> invoiceDate, Nullable<bool> paid, ObjectParameter successFlag)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(double));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateInvoice", invoiceIDParameter, invoiceTypeIDParameter, invoiceAmountParameter, invoiceDateParameter, paidParameter, successFlag);
        }
    
        public virtual int proc_UpdateKnockerResponse(Nullable<int> knockerResponseID, Nullable<int> knockResponseTypeID, string address, string zip, Nullable<double> lat, Nullable<double> @long, ObjectParameter successFlag)
        {
            var knockerResponseIDParameter = knockerResponseID.HasValue ?
                new ObjectParameter("KnockerResponseID", knockerResponseID) :
                new ObjectParameter("KnockerResponseID", typeof(int));
    
            var knockResponseTypeIDParameter = knockResponseTypeID.HasValue ?
                new ObjectParameter("KnockResponseTypeID", knockResponseTypeID) :
                new ObjectParameter("KnockResponseTypeID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var longParameter = @long.HasValue ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateKnockerResponse", knockerResponseIDParameter, knockResponseTypeIDParameter, addressParameter, zipParameter, latParameter, longParameter, successFlag);
        }
    
        public virtual int proc_UpdateLead(Nullable<int> leadID, Nullable<int> customerID, Nullable<int> addressID, string status, Nullable<int> creditToID, string temperature, ObjectParameter successFlag)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var creditToIDParameter = creditToID.HasValue ?
                new ObjectParameter("CreditToID", creditToID) :
                new ObjectParameter("CreditToID", typeof(int));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateLead", leadIDParameter, customerIDParameter, addressIDParameter, statusParameter, creditToIDParameter, temperatureParameter, successFlag);
        }
    
        public virtual int proc_UpdateNewRoof(Nullable<int> newRoofID, Nullable<int> productID, Nullable<double> upgradeCost, string comments, ObjectParameter successFlag)
        {
            var newRoofIDParameter = newRoofID.HasValue ?
                new ObjectParameter("NewRoofID", newRoofID) :
                new ObjectParameter("NewRoofID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var upgradeCostParameter = upgradeCost.HasValue ?
                new ObjectParameter("UpgradeCost", upgradeCost) :
                new ObjectParameter("UpgradeCost", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateNewRoof", newRoofIDParameter, productIDParameter, upgradeCostParameter, commentsParameter, successFlag);
        }
    
        public virtual int proc_UpdateOrder(Nullable<int> orderID, Nullable<int> vendorID, Nullable<System.DateTime> dateOrdered, Nullable<System.DateTime> dateDropped, Nullable<System.DateTime> scheduledInstallation, ObjectParameter successFlag)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var dateOrderedParameter = dateOrdered.HasValue ?
                new ObjectParameter("DateOrdered", dateOrdered) :
                new ObjectParameter("DateOrdered", typeof(System.DateTime));
    
            var dateDroppedParameter = dateDropped.HasValue ?
                new ObjectParameter("DateDropped", dateDropped) :
                new ObjectParameter("DateDropped", typeof(System.DateTime));
    
            var scheduledInstallationParameter = scheduledInstallation.HasValue ?
                new ObjectParameter("ScheduledInstallation", scheduledInstallation) :
                new ObjectParameter("ScheduledInstallation", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateOrder", orderIDParameter, vendorIDParameter, dateOrderedParameter, dateDroppedParameter, scheduledInstallationParameter, successFlag);
        }
    
        public virtual int proc_UpdateOrderItem(Nullable<int> orderItemID, Nullable<int> productID, Nullable<int> unitOfMeasureID, Nullable<int> quantity, ObjectParameter successFlag)
        {
            var orderItemIDParameter = orderItemID.HasValue ?
                new ObjectParameter("OrderItemID", orderItemID) :
                new ObjectParameter("OrderItemID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitOfMeasureIDParameter = unitOfMeasureID.HasValue ?
                new ObjectParameter("UnitOfMeasureID", unitOfMeasureID) :
                new ObjectParameter("UnitOfMeasureID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateOrderItem", orderItemIDParameter, productIDParameter, unitOfMeasureIDParameter, quantityParameter, successFlag);
        }
    
        public virtual int proc_UpdatePayment(Nullable<int> paymentID, Nullable<int> paymentTypeID, Nullable<int> paymentDescriptionID, Nullable<double> amount, Nullable<System.DateTime> paymentDate, ObjectParameter successFlag)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentDescriptionIDParameter = paymentDescriptionID.HasValue ?
                new ObjectParameter("PaymentDescriptionID", paymentDescriptionID) :
                new ObjectParameter("PaymentDescriptionID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdatePayment", paymentIDParameter, paymentTypeIDParameter, paymentDescriptionIDParameter, amountParameter, paymentDateParameter, successFlag);
        }
    
        public virtual int proc_UpdatePlane(Nullable<int> planeID, Nullable<int> planeTypeID, Nullable<int> groupNumber, Nullable<int> numOfLayers, Nullable<int> threeAndOne, Nullable<int> fourAndUp, Nullable<int> pitch, Nullable<int> hipValley, Nullable<int> ridgeLength, Nullable<int> rakeLength, Nullable<int> eaveHeight, Nullable<int> eaveLength, Nullable<int> numberDecking, Nullable<int> stepFlashing, Nullable<double> squareFootage, string itemSpec, ObjectParameter successFlag)
        {
            var planeIDParameter = planeID.HasValue ?
                new ObjectParameter("PlaneID", planeID) :
                new ObjectParameter("PlaneID", typeof(int));
    
            var planeTypeIDParameter = planeTypeID.HasValue ?
                new ObjectParameter("PlaneTypeID", planeTypeID) :
                new ObjectParameter("PlaneTypeID", typeof(int));
    
            var groupNumberParameter = groupNumber.HasValue ?
                new ObjectParameter("GroupNumber", groupNumber) :
                new ObjectParameter("GroupNumber", typeof(int));
    
            var numOfLayersParameter = numOfLayers.HasValue ?
                new ObjectParameter("NumOfLayers", numOfLayers) :
                new ObjectParameter("NumOfLayers", typeof(int));
    
            var threeAndOneParameter = threeAndOne.HasValue ?
                new ObjectParameter("ThreeAndOne", threeAndOne) :
                new ObjectParameter("ThreeAndOne", typeof(int));
    
            var fourAndUpParameter = fourAndUp.HasValue ?
                new ObjectParameter("FourAndUp", fourAndUp) :
                new ObjectParameter("FourAndUp", typeof(int));
    
            var pitchParameter = pitch.HasValue ?
                new ObjectParameter("Pitch", pitch) :
                new ObjectParameter("Pitch", typeof(int));
    
            var hipValleyParameter = hipValley.HasValue ?
                new ObjectParameter("HipValley", hipValley) :
                new ObjectParameter("HipValley", typeof(int));
    
            var ridgeLengthParameter = ridgeLength.HasValue ?
                new ObjectParameter("RidgeLength", ridgeLength) :
                new ObjectParameter("RidgeLength", typeof(int));
    
            var rakeLengthParameter = rakeLength.HasValue ?
                new ObjectParameter("RakeLength", rakeLength) :
                new ObjectParameter("RakeLength", typeof(int));
    
            var eaveHeightParameter = eaveHeight.HasValue ?
                new ObjectParameter("EaveHeight", eaveHeight) :
                new ObjectParameter("EaveHeight", typeof(int));
    
            var eaveLengthParameter = eaveLength.HasValue ?
                new ObjectParameter("EaveLength", eaveLength) :
                new ObjectParameter("EaveLength", typeof(int));
    
            var numberDeckingParameter = numberDecking.HasValue ?
                new ObjectParameter("NumberDecking", numberDecking) :
                new ObjectParameter("NumberDecking", typeof(int));
    
            var stepFlashingParameter = stepFlashing.HasValue ?
                new ObjectParameter("StepFlashing", stepFlashing) :
                new ObjectParameter("StepFlashing", typeof(int));
    
            var squareFootageParameter = squareFootage.HasValue ?
                new ObjectParameter("SquareFootage", squareFootage) :
                new ObjectParameter("SquareFootage", typeof(double));
    
            var itemSpecParameter = itemSpec != null ?
                new ObjectParameter("ItemSpec", itemSpec) :
                new ObjectParameter("ItemSpec", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdatePlane", planeIDParameter, planeTypeIDParameter, groupNumberParameter, numOfLayersParameter, threeAndOneParameter, fourAndUpParameter, pitchParameter, hipValleyParameter, ridgeLengthParameter, rakeLengthParameter, eaveHeightParameter, eaveLengthParameter, numberDeckingParameter, stepFlashingParameter, squareFootageParameter, itemSpecParameter, successFlag);
        }
    
        public virtual int proc_UpdateReferrer(Nullable<int> referrerID, string firstName, string lastName, string suffix, string mailingAddress, string zip, string email, string cellPhone, ObjectParameter successFlag)
        {
            var referrerIDParameter = referrerID.HasValue ?
                new ObjectParameter("ReferrerID", referrerID) :
                new ObjectParameter("ReferrerID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var mailingAddressParameter = mailingAddress != null ?
                new ObjectParameter("MailingAddress", mailingAddress) :
                new ObjectParameter("MailingAddress", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateReferrer", referrerIDParameter, firstNameParameter, lastNameParameter, suffixParameter, mailingAddressParameter, zipParameter, emailParameter, cellPhoneParameter, successFlag);
        }
    
        public virtual int proc_UpdateScope(Nullable<int> scopeID, Nullable<int> scopeTypeID, Nullable<double> interior, Nullable<double> exterior, Nullable<double> gutter, Nullable<double> roofAmount, Nullable<double> tax, Nullable<double> deductible, Nullable<double> total, Nullable<double> oandP, Nullable<bool> accepted, ObjectParameter successFlag)
        {
            var scopeIDParameter = scopeID.HasValue ?
                new ObjectParameter("ScopeID", scopeID) :
                new ObjectParameter("ScopeID", typeof(int));
    
            var scopeTypeIDParameter = scopeTypeID.HasValue ?
                new ObjectParameter("ScopeTypeID", scopeTypeID) :
                new ObjectParameter("ScopeTypeID", typeof(int));
    
            var interiorParameter = interior.HasValue ?
                new ObjectParameter("Interior", interior) :
                new ObjectParameter("Interior", typeof(double));
    
            var exteriorParameter = exterior.HasValue ?
                new ObjectParameter("Exterior", exterior) :
                new ObjectParameter("Exterior", typeof(double));
    
            var gutterParameter = gutter.HasValue ?
                new ObjectParameter("Gutter", gutter) :
                new ObjectParameter("Gutter", typeof(double));
    
            var roofAmountParameter = roofAmount.HasValue ?
                new ObjectParameter("RoofAmount", roofAmount) :
                new ObjectParameter("RoofAmount", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var deductibleParameter = deductible.HasValue ?
                new ObjectParameter("Deductible", deductible) :
                new ObjectParameter("Deductible", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var oandPParameter = oandP.HasValue ?
                new ObjectParameter("OandP", oandP) :
                new ObjectParameter("OandP", typeof(double));
    
            var acceptedParameter = accepted.HasValue ?
                new ObjectParameter("Accepted", accepted) :
                new ObjectParameter("Accepted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateScope", scopeIDParameter, scopeTypeIDParameter, interiorParameter, exteriorParameter, gutterParameter, roofAmountParameter, taxParameter, deductibleParameter, totalParameter, oandPParameter, acceptedParameter, successFlag);
        }
    
        public virtual int proc_UpdateSurplusSupplies(Nullable<int> surplusSuppliesID, Nullable<int> unitOFMeasureID, Nullable<int> quantity, Nullable<System.DateTime> pickUpDate, Nullable<System.DateTime> dropOffDate, string items, ObjectParameter successFlag)
        {
            var surplusSuppliesIDParameter = surplusSuppliesID.HasValue ?
                new ObjectParameter("SurplusSuppliesID", surplusSuppliesID) :
                new ObjectParameter("SurplusSuppliesID", typeof(int));
    
            var unitOFMeasureIDParameter = unitOFMeasureID.HasValue ?
                new ObjectParameter("UnitOFMeasureID", unitOFMeasureID) :
                new ObjectParameter("UnitOFMeasureID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var pickUpDateParameter = pickUpDate.HasValue ?
                new ObjectParameter("PickUpDate", pickUpDate) :
                new ObjectParameter("PickUpDate", typeof(System.DateTime));
    
            var dropOffDateParameter = dropOffDate.HasValue ?
                new ObjectParameter("DropOffDate", dropOffDate) :
                new ObjectParameter("DropOffDate", typeof(System.DateTime));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateSurplusSupplies", surplusSuppliesIDParameter, unitOFMeasureIDParameter, quantityParameter, pickUpDateParameter, dropOffDateParameter, itemsParameter, successFlag);
        }
    
        public virtual int proc_UpdateUser(Nullable<int> userID, string username, string pass, Nullable<int> permissionID, Nullable<bool> active, ObjectParameter successFlag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateUser", userIDParameter, usernameParameter, passParameter, permissionIDParameter, activeParameter, successFlag);
        }
    
        public virtual int proc_UpdateVendor(Nullable<int> vendorID, Nullable<int> vendorTypeID, string companyName, string eIN, string contactFirstName, string contactLastName, string suffix, string vendorAddress, string zip, string phone, string companyPhone, string fax, string email, string website, Nullable<System.DateTime> generalLiabilityExpiration, ObjectParameter successFlag)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorTypeIDParameter = vendorTypeID.HasValue ?
                new ObjectParameter("VendorTypeID", vendorTypeID) :
                new ObjectParameter("VendorTypeID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var eINParameter = eIN != null ?
                new ObjectParameter("EIN", eIN) :
                new ObjectParameter("EIN", typeof(string));
    
            var contactFirstNameParameter = contactFirstName != null ?
                new ObjectParameter("ContactFirstName", contactFirstName) :
                new ObjectParameter("ContactFirstName", typeof(string));
    
            var contactLastNameParameter = contactLastName != null ?
                new ObjectParameter("ContactLastName", contactLastName) :
                new ObjectParameter("ContactLastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var vendorAddressParameter = vendorAddress != null ?
                new ObjectParameter("VendorAddress", vendorAddress) :
                new ObjectParameter("VendorAddress", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var generalLiabilityExpirationParameter = generalLiabilityExpiration.HasValue ?
                new ObjectParameter("GeneralLiabilityExpiration", generalLiabilityExpiration) :
                new ObjectParameter("GeneralLiabilityExpiration", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateVendor", vendorIDParameter, vendorTypeIDParameter, companyNameParameter, eINParameter, contactFirstNameParameter, contactLastNameParameter, suffixParameter, vendorAddressParameter, zipParameter, phoneParameter, companyPhoneParameter, faxParameter, emailParameter, websiteParameter, generalLiabilityExpirationParameter, successFlag);
        }
    
        public virtual ObjectResult<proc_GetRecentClaimsBySalesPersonID_Result> proc_GetRecentClaimsBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRecentClaimsBySalesPersonID_Result>("proc_GetRecentClaimsBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetRecentInspectionsBySalesPersonID_Result> proc_GetRecentInspectionsBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRecentInspectionsBySalesPersonID_Result>("proc_GetRecentInspectionsBySalesPersonID", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<proc_GetRecentLeadsBySalesPersonID_Result> proc_GetRecentLeadsBySalesPersonID(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRecentLeadsBySalesPersonID_Result>("proc_GetRecentLeadsBySalesPersonID", salesPersonIDParameter);
        }
    }
}
